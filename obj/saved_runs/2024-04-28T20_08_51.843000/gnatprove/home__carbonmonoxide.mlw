module Home__carbonmonoxide__cm
  use _gnatprove_standard.Main
  use int.Int
  
  val cm : int__ref
end

module Home__carbon_monoxide
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon_monoxide
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon_monoxide,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon_monoxide__ref = {
                             mutable carbon_monoxide__content :
                               carbon_monoxide
                             }
  
  function carbon_monoxide__ref_carbon_monoxide__content__projection (a: carbon_monoxide__ref) : carbon_monoxide =
    a.carbon_monoxide__content
  
  meta "model_projection" function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  meta "inline:no" function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  val carbon_monoxide__havoc (x: carbon_monoxide__ref) : unit
    writes { x }
end

module Home__carbon_monoxide___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__carbon_monoxide as Home__carbon_monoxide
  
  predicate dynamic_invariant (temp___expr_217: int) (temp___is_init_213: bool) (temp___skip_constant_214: bool) (temp___do_toplevel_215: bool) (temp___do_typ_inv_216: bool) =
    if ((temp___is_init_213 = True) \/
          (Home__carbon_monoxide.first <= Home__carbon_monoxide.last)) then
      (((Home__carbon_monoxide.dynamic_property Home__carbon_monoxide.first)
          Home__carbon_monoxide.last)
         temp___expr_217)
    else true
  
  val dynamic_invariant (temp___expr_217: int) (temp___is_init_213: bool) (temp___skip_constant_214: bool) (temp___do_toplevel_215: bool) (temp___do_typ_inv_216: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_217 : int))
                      (temp___is_init_213 : bool))
                     (temp___skip_constant_214 : bool))
                    (temp___do_toplevel_215 : bool))
                   (temp___do_typ_inv_216 : bool)) }
  
  predicate default_initial_assumption (temp___expr_218: int) (temp___skip_top_level_219: bool) =
    true
  
  val default_initial_assumption (temp___expr_218: int) (temp___skip_top_level_219: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_218 : int))
                   (temp___skip_top_level_219 : bool)) }
end

module Home__carbonmonoxide__cm___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Home__carbonmonoxide__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__carbonmonoxide__cm as Home__carbonmonoxide__cm
  use Home__carbon_monoxide___axiom as Home__carbon_monoxide___axiom
  use Home__carbon_monoxide___axiom as Home__carbon_monoxide___axiom
  use Home__carbonmonoxide__cm___axiom as Home__carbonmonoxide__cm___axiom
  
  let def (__void_param : unit)
    requires { [#"home.ads" 30 0 0] true }
    ensures { [#"home.ads" 30 0 0]
              [#"home.ads" 32 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:     Post => cm = Safe;              ^ home.ads:32:14:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:6]
              [@GP_Sloc:home.ads:32:14]
              [@GP_Sloc:home.ads:32:14]
              [@GP_Pretty_Ada:1449]
              ((Home__carbonmonoxide__cm.cm.int__content) = (0 : int)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram home.ads:30]
      ());
     assume {
       ((((Home__carbon_monoxide___axiom.dynamic_invariant
             (Home__carbonmonoxide__cm.cm.int__content))
            False)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram home.ads:30]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram home.ads:30]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram home.ads:30] ());
     (try
        ([@GP_Sloc:home.adb:41:10]
         [#"home.adb" 41 0 0]
         [#"home.adb" 41 0 0]
         (Home__carbonmonoxide__cm.cm.int__content <- (0 : int)));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ = ((Home__carbonmonoxide__cm.cm.int__content) = (0 : int)) in
          () in
        ()
      end))
end
