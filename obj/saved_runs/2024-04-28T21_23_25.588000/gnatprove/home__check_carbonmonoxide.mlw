module Kitchen_appliances__fridge
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type fridge
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = fridge,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type fridge__ref = { mutable fridge__content : fridge }
  
  function fridge__ref_fridge__content__projection (a: fridge__ref) : fridge =
    a.fridge__content
  
  meta "model_projection" function fridge__ref_fridge__content__projection
  
  meta "inline:no" function fridge__ref_fridge__content__projection
  
  val fridge__havoc (x: fridge__ref) : unit
    writes { x }
end

module Kitchen_appliances__fridge__rep
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Kitchen_appliances__fridge.fridge,
    predicate in_range = Kitchen_appliances__fridge.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Kitchen_appliances__oven
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type oven
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = oven,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type oven__ref = { mutable oven__content : oven }
  
  function oven__ref_oven__content__projection (a: oven__ref) : oven =
    a.oven__content
  
  meta "model_projection" function oven__ref_oven__content__projection
  
  meta "inline:no" function oven__ref_oven__content__projection
  
  val oven__havoc (x: oven__ref) : unit
    writes { x }
end

module Kitchen_appliances__oven__rep
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Kitchen_appliances__oven.oven,
    predicate in_range = Kitchen_appliances__oven.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Kitchen_appliances__not_open__rep
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use Kitchen_appliances__fridge__rep as Kitchen_appliances__fridge__rep
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use Kitchen_appliances__oven__rep as Kitchen_appliances__oven__rep
  
  type __split_fields = {
                       rec__kitchen_appliances__not_open__f :
                         Kitchen_appliances__fridge.fridge;
                       rec__kitchen_appliances__not_open__o :
                         Kitchen_appliances__oven.oven
                       }
  
  function __split_fields_rec__kitchen_appliances__not_open__f__projection (a: __split_fields) : 
    Kitchen_appliances__fridge.fridge =
    a.rec__kitchen_appliances__not_open__f
  
  meta "model_projection" function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  meta "inline:no" function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  function __split_fields_rec__kitchen_appliances__not_open__o__projection (a: __split_fields) : 
    Kitchen_appliances__oven.oven =
    a.rec__kitchen_appliances__not_open__o
  
  meta "model_projection" function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  meta "inline:no" function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate kitchen_appliances__not_open__f__pred (a: __rep) = true
  
  val kitchen_appliances__not_open__f__pred (a: __rep) : bool
    ensures { result <-> (kitchen_appliances__not_open__f__pred (a : __rep)) }
  
  val rec__kitchen_appliances__not_open__f_ (a: __rep) : Kitchen_appliances__fridge.fridge
    requires { kitchen_appliances__not_open__f__pred a }
    ensures { (result
                 = ((__split_fields a).rec__kitchen_appliances__not_open__f)) }
  
  predicate kitchen_appliances__not_open__o__pred (a: __rep) = true
  
  val kitchen_appliances__not_open__o__pred (a: __rep) : bool
    ensures { result <-> (kitchen_appliances__not_open__o__pred (a : __rep)) }
  
  val rec__kitchen_appliances__not_open__o_ (a: __rep) : Kitchen_appliances__oven.oven
    requires { kitchen_appliances__not_open__o__pred a }
    ensures { (result
                 = ((__split_fields a).rec__kitchen_appliances__not_open__o)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Kitchen_appliances__fridge__rep.to_rep
            ((__split_fields a).rec__kitchen_appliances__not_open__f))
           = (Kitchen_appliances__fridge__rep.to_rep
                ((__split_fields b).rec__kitchen_appliances__not_open__f))) /\
          ((Kitchen_appliances__oven__rep.to_rep
              ((__split_fields a).rec__kitchen_appliances__not_open__o))
             = (Kitchen_appliances__oven__rep.to_rep
                  ((__split_fields b).rec__kitchen_appliances__not_open__o)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Kitchen_appliances__not_open
  use export Kitchen_appliances__not_open__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type not_open = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function kitchen_appliances__not_open__f__first__bit : int
  
  val function kitchen_appliances__not_open__f__last__bit : int
  
  val function kitchen_appliances__not_open__f__position : int
  
  axiom kitchen_appliances__not_open__f__first__bit_axiom:
    (kitchen_appliances__not_open__f__first__bit >= (0 : int))
  
  axiom kitchen_appliances__not_open__f__last__bit_axiom:
    (kitchen_appliances__not_open__f__last__bit
       > kitchen_appliances__not_open__f__first__bit)
  
  axiom kitchen_appliances__not_open__f__position_axiom:
    (kitchen_appliances__not_open__f__position >= (0 : int))
  
  val function kitchen_appliances__not_open__o__first__bit : int
  
  val function kitchen_appliances__not_open__o__last__bit : int
  
  val function kitchen_appliances__not_open__o__position : int
  
  axiom kitchen_appliances__not_open__o__first__bit_axiom:
    (kitchen_appliances__not_open__o__first__bit >= (0 : int))
  
  axiom kitchen_appliances__not_open__o__last__bit_axiom:
    (kitchen_appliances__not_open__o__last__bit
       > kitchen_appliances__not_open__o__first__bit)
  
  axiom kitchen_appliances__not_open__o__position_axiom:
    (kitchen_appliances__not_open__o__position >= (0 : int))
  
  val function user_eq (a: not_open) (b: not_open) : bool
  
  val function dummy : not_open
  
  type not_open__ref = { mutable not_open__content : not_open }
  
  function not_open__ref_not_open__content__projection (a: not_open__ref) : not_open =
    a.not_open__content
  
  meta "model_projection" function not_open__ref_not_open__content__projection
  
  meta "inline:no" function not_open__ref_not_open__content__projection
  
  val not_open__havoc (x: not_open__ref) : unit
    writes { x }
end

module Heating_system__temperature
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type temperature = <range 0 40>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (40 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = temperature,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type temperature__ref = { mutable temperature__content : temperature }
  
  function temperature__ref_temperature__content__projection (a: temperature__ref) : temperature =
    a.temperature__content
  
  meta "model_projection" function temperature__ref_temperature__content__projection
  
  meta "inline:no" function temperature__ref_temperature__content__projection
  
  val temperature__havoc (x: temperature__ref) : unit
    writes { x }
end

module Heating_system__temperature__rep
  use Heating_system__temperature as Heating_system__temperature
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Heating_system__temperature.temperature) : int =
    Heating_system__temperature.temperature'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Heating_system__temperature.temperature,
    predicate in_range = Heating_system__temperature.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Heating_system__windows
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type windows
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = windows,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type windows__ref = { mutable windows__content : windows }
  
  function windows__ref_windows__content__projection (a: windows__ref) : windows =
    a.windows__content
  
  meta "model_projection" function windows__ref_windows__content__projection
  
  meta "inline:no" function windows__ref_windows__content__projection
  
  val windows__havoc (x: windows__ref) : unit
    writes { x }
end

module Heating_system__windows__rep
  use Heating_system__windows as Heating_system__windows
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Heating_system__windows.windows,
    predicate in_range = Heating_system__windows.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Home__homesettingforenergy__rep
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  use Heating_system__temperature as Heating_system__temperature
  use Heating_system__temperature__rep as Heating_system__temperature__rep
  use Heating_system__windows as Heating_system__windows
  use Heating_system__windows__rep as Heating_system__windows__rep
  
  type __split_fields = {
                       rec__home__homesettingforenergy__temperaturesetting :
                         Heating_system__temperature.temperature;
                       rec__home__homesettingforenergy__windowsstatus :
                         Heating_system__windows.windows;
                       rec__home__homesettingforenergy__fridgestatus :
                         Kitchen_appliances__not_open.not_open;
                       rec__home__homesettingforenergy__ovenstatus :
                         Kitchen_appliances__not_open.not_open
                       }
  
  function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection (a: __split_fields) : 
    Heating_system__temperature.temperature =
    a.rec__home__homesettingforenergy__temperaturesetting
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection (a: __split_fields) : 
    Heating_system__windows.windows =
    a.rec__home__homesettingforenergy__windowsstatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection (a: __split_fields) : 
    Kitchen_appliances__not_open.not_open =
    a.rec__home__homesettingforenergy__fridgestatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection (a: __split_fields) : 
    Kitchen_appliances__not_open.not_open =
    a.rec__home__homesettingforenergy__ovenstatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate home__homesettingforenergy__temperaturesetting__pred (a: __rep) =
    true
  
  val home__homesettingforenergy__temperaturesetting__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (home__homesettingforenergy__temperaturesetting__pred
                   (a : __rep)) }
  
  val rec__home__homesettingforenergy__temperaturesetting_ (a: __rep) : 
    Heating_system__temperature.temperature
    requires { home__homesettingforenergy__temperaturesetting__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__temperaturesetting)) }
  
  predicate home__homesettingforenergy__windowsstatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__windowsstatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__windowsstatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__windowsstatus_ (a: __rep) : Heating_system__windows.windows
    requires { home__homesettingforenergy__windowsstatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__windowsstatus)) }
  
  predicate home__homesettingforenergy__fridgestatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__fridgestatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__fridgestatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__fridgestatus_ (a: __rep) : Kitchen_appliances__not_open.not_open
    requires { home__homesettingforenergy__fridgestatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__fridgestatus)) }
  
  predicate home__homesettingforenergy__ovenstatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__ovenstatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__ovenstatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__ovenstatus_ (a: __rep) : Kitchen_appliances__not_open.not_open
    requires { home__homesettingforenergy__ovenstatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__ovenstatus)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Heating_system__temperature__rep.to_rep
             ((__split_fields a).rec__home__homesettingforenergy__temperaturesetting))
            = (Heating_system__temperature__rep.to_rep
                 ((__split_fields b).rec__home__homesettingforenergy__temperaturesetting))) /\
           ((Heating_system__windows__rep.to_rep
               ((__split_fields a).rec__home__homesettingforenergy__windowsstatus))
              = (Heating_system__windows__rep.to_rep
                   ((__split_fields b).rec__home__homesettingforenergy__windowsstatus)))) /\
          (((Kitchen_appliances__not_open.bool_eq
               ((__split_fields a).rec__home__homesettingforenergy__fridgestatus))
              ((__split_fields b).rec__home__homesettingforenergy__fridgestatus)) /\
             ((Kitchen_appliances__not_open.bool_eq
                 ((__split_fields a).rec__home__homesettingforenergy__ovenstatus))
                ((__split_fields b).rec__home__homesettingforenergy__ovenstatus)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Home__homesettingforenergy
  use export Home__homesettingforenergy__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type homesettingforenergy = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function home__homesettingforenergy__temperaturesetting__first__bit : 
    int
  
  val function home__homesettingforenergy__temperaturesetting__last__bit : 
    int
  
  val function home__homesettingforenergy__temperaturesetting__position : 
    int
  
  axiom home__homesettingforenergy__temperaturesetting__first__bit_axiom:
    (home__homesettingforenergy__temperaturesetting__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__temperaturesetting__last__bit_axiom:
    (home__homesettingforenergy__temperaturesetting__last__bit
       > home__homesettingforenergy__temperaturesetting__first__bit)
  
  axiom home__homesettingforenergy__temperaturesetting__position_axiom:
    (home__homesettingforenergy__temperaturesetting__position >= (0 : int))
  
  val function home__homesettingforenergy__windowsstatus__first__bit : 
    int
  
  val function home__homesettingforenergy__windowsstatus__last__bit : 
    int
  
  val function home__homesettingforenergy__windowsstatus__position : 
    int
  
  axiom home__homesettingforenergy__windowsstatus__first__bit_axiom:
    (home__homesettingforenergy__windowsstatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__windowsstatus__last__bit_axiom:
    (home__homesettingforenergy__windowsstatus__last__bit
       > home__homesettingforenergy__windowsstatus__first__bit)
  
  axiom home__homesettingforenergy__windowsstatus__position_axiom:
    (home__homesettingforenergy__windowsstatus__position >= (0 : int))
  
  val function home__homesettingforenergy__fridgestatus__first__bit : 
    int
  
  val function home__homesettingforenergy__fridgestatus__last__bit : 
    int
  
  val function home__homesettingforenergy__fridgestatus__position : int
  
  axiom home__homesettingforenergy__fridgestatus__first__bit_axiom:
    (home__homesettingforenergy__fridgestatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__fridgestatus__last__bit_axiom:
    (home__homesettingforenergy__fridgestatus__last__bit
       > home__homesettingforenergy__fridgestatus__first__bit)
  
  axiom home__homesettingforenergy__fridgestatus__position_axiom:
    (home__homesettingforenergy__fridgestatus__position >= (0 : int))
  
  val function home__homesettingforenergy__ovenstatus__first__bit : int
  
  val function home__homesettingforenergy__ovenstatus__last__bit : int
  
  val function home__homesettingforenergy__ovenstatus__position : int
  
  axiom home__homesettingforenergy__ovenstatus__first__bit_axiom:
    (home__homesettingforenergy__ovenstatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__ovenstatus__last__bit_axiom:
    (home__homesettingforenergy__ovenstatus__last__bit
       > home__homesettingforenergy__ovenstatus__first__bit)
  
  axiom home__homesettingforenergy__ovenstatus__position_axiom:
    (home__homesettingforenergy__ovenstatus__position >= (0 : int))
  
  val function user_eq (a: homesettingforenergy) (b: homesettingforenergy) : 
    bool
  
  val function dummy : homesettingforenergy
  
  type homesettingforenergy__ref = {
                                  mutable homesettingforenergy__content :
                                    homesettingforenergy
                                  }
  
  function homesettingforenergy__ref_homesettingforenergy__content__projection (a: homesettingforenergy__ref) : homesettingforenergy =
    a.homesettingforenergy__content
  
  meta "model_projection" function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  meta "inline:no" function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  val homesettingforenergy__havoc (x: homesettingforenergy__ref) : unit
    writes { x }
end

module Home__homesettingforenergy___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  
  predicate dynamic_invariant (temp___expr_203: Home__homesettingforenergy.homesettingforenergy) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) =
    true
  
  val dynamic_invariant (temp___expr_203: Home__homesettingforenergy.homesettingforenergy) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_203 :
                          Home__homesettingforenergy.homesettingforenergy))
                      (temp___is_init_199 : bool))
                     (temp___skip_constant_200 : bool))
                    (temp___do_toplevel_201 : bool))
                   (temp___do_typ_inv_202 : bool)) }
  
  predicate default_initial_assumption (temp___expr_204: Home__homesettingforenergy.homesettingforenergy) (temp___skip_top_level_205: bool) =
    true
  
  val default_initial_assumption (temp___expr_204: Home__homesettingforenergy.homesettingforenergy) (temp___skip_top_level_205: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_204 :
                       Home__homesettingforenergy.homesettingforenergy))
                   (temp___skip_top_level_205 : bool)) }
end

module Home__house_temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Heating_system__temperature as Heating_system__temperature
  use Heating_system__temperature__rep as Heating_system__temperature__rep
  
  val house_temperature (ht__split_fields: Home__homesettingforenergy.__split_fields__ref) : 
    unit
    requires { [@GP_Pretty_Ada:1430]
               ((Heating_system__temperature__rep.to_rep
                   ((Home__homesettingforenergy.__split_fields
                        { Home__homesettingforenergy.__split_fields =
                            (Home__homesettingforenergy.__split_fields__content
                                ht__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                  < (17 : int))
    }
    writes { ht__split_fields }
    ensures { ((([@GP_Pretty_Ada:1045]
                 ((Heating_system__temperature__rep.to_rep
                     ((Home__homesettingforenergy.__split_fields
                          { Home__homesettingforenergy.__split_fields =
                              (Home__homesettingforenergy.__split_fields__content
                                  ht__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                    >= (17 : int))) /\
                  ([@GP_Pretty_Ada:1051]
                   ((Heating_system__temperature__rep.to_rep
                       ((Home__homesettingforenergy.__split_fields
                            { Home__homesettingforenergy.__split_fields =
                                (Home__homesettingforenergy.__split_fields__content
                                    ht__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                      <= (19 : int)))) /\
                 (((((Home__homesettingforenergy___axiom.dynamic_invariant
                        { Home__homesettingforenergy.__split_fields =
                            (Home__homesettingforenergy.__split_fields__content
                                ht__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Home__control_windows___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Heating_system__windows as Heating_system__windows
  use Heating_system__windows__rep as Heating_system__windows__rep
  
  val control_windows (ch__split_fields: Home__homesettingforenergy.__split_fields__ref) : 
    unit
    requires { [@GP_Pretty_Ada:1469]
               (((Heating_system__windows__rep.to_rep
                    ((Home__homesettingforenergy.__split_fields
                         { Home__homesettingforenergy.__split_fields =
                             (Home__homesettingforenergy.__split_fields__content
                                 ch__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus))
                   = (1 : int)) \/
                  ((Heating_system__windows__rep.to_rep
                      ((Home__homesettingforenergy.__split_fields
                           { Home__homesettingforenergy.__split_fields =
                               (Home__homesettingforenergy.__split_fields__content
                                   ch__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus))
                     = (0 : int)))
    }
    writes { ch__split_fields }
    ensures { (([@GP_Pretty_Ada:1481]
                ((Heating_system__windows__rep.to_rep
                    ((Home__homesettingforenergy.__split_fields
                         { Home__homesettingforenergy.__split_fields =
                             (Home__homesettingforenergy.__split_fields__content
                                 ch__split_fields) }).Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus))
                   = (1 : int))) /\
                 (((((Home__homesettingforenergy___axiom.dynamic_invariant
                        { Home__homesettingforenergy.__split_fields =
                            (Home__homesettingforenergy.__split_fields__content
                                ch__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Kitchen_appliances__not_open___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  
  predicate dynamic_invariant (temp___expr_194: Kitchen_appliances__not_open.not_open) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) =
    true
  
  val dynamic_invariant (temp___expr_194: Kitchen_appliances__not_open.not_open) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_194 :
                          Kitchen_appliances__not_open.not_open))
                      (temp___is_init_190 : bool))
                     (temp___skip_constant_191 : bool))
                    (temp___do_toplevel_192 : bool))
                   (temp___do_typ_inv_193 : bool)) }
  
  predicate default_initial_assumption (temp___expr_195: Kitchen_appliances__not_open.not_open) (temp___skip_top_level_196: bool) =
    true
  
  val default_initial_assumption (temp___expr_195: Kitchen_appliances__not_open.not_open) (temp___skip_top_level_196: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_195 : Kitchen_appliances__not_open.not_open))
                   (temp___skip_top_level_196 : bool)) }
end

module Home__isfridgeopenorclosed___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  use Kitchen_appliances__not_open___axiom as Kitchen_appliances__not_open___axiom
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use Kitchen_appliances__fridge__rep as Kitchen_appliances__fridge__rep
  
  val isfridgeopenorclosed (fr__split_fields: Kitchen_appliances__not_open.__split_fields__ref) : 
    unit
    requires { true }
    writes { fr__split_fields }
    ensures { (([@GP_Pretty_Ada:1496]
                ((Kitchen_appliances__fridge__rep.to_rep
                    ((Kitchen_appliances__not_open.__split_fields
                         { Kitchen_appliances__not_open.__split_fields =
                             (Kitchen_appliances__not_open.__split_fields__content
                                 fr__split_fields) }).Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__f))
                   = (0 : int))) /\
                 (((((Kitchen_appliances__not_open___axiom.dynamic_invariant
                        { Kitchen_appliances__not_open.__split_fields =
                            (Kitchen_appliances__not_open.__split_fields__content
                                fr__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Home__isovenopenorclosed___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  use Kitchen_appliances__not_open___axiom as Kitchen_appliances__not_open___axiom
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use Kitchen_appliances__oven__rep as Kitchen_appliances__oven__rep
  
  val isovenopenorclosed (ov__split_fields: Kitchen_appliances__not_open.__split_fields__ref) : 
    unit
    requires { true }
    writes { ov__split_fields }
    ensures { (([@GP_Pretty_Ada:1510]
                ((Kitchen_appliances__oven__rep.to_rep
                    ((Kitchen_appliances__not_open.__split_fields
                         { Kitchen_appliances__not_open.__split_fields =
                             (Kitchen_appliances__not_open.__split_fields__content
                                 ov__split_fields) }).Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__o))
                   = (0 : int))) /\
                 (((((Kitchen_appliances__not_open___axiom.dynamic_invariant
                        { Kitchen_appliances__not_open.__split_fields =
                            (Kitchen_appliances__not_open.__split_fields__content
                                ov__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Home__check_carbonmonoxide
  use _gnatprove_standard.Main
  use int.Int
  
  val function check_carbonmonoxide (__void_param: unit) : int
  
  val predicate check_carbonmonoxide__function_guard (temp___result_161: int) (__void_param: unit)
end

module Home__carbon_monoxide
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon_monoxide
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon_monoxide,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon_monoxide__ref = {
                             mutable carbon_monoxide__content :
                               carbon_monoxide
                             }
  
  function carbon_monoxide__ref_carbon_monoxide__content__projection (a: carbon_monoxide__ref) : carbon_monoxide =
    a.carbon_monoxide__content
  
  meta "model_projection" function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  meta "inline:no" function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  val carbon_monoxide__havoc (x: carbon_monoxide__ref) : unit
    writes { x }
end

module Home__carbon_monoxide___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__carbon_monoxide as Home__carbon_monoxide
  
  predicate dynamic_invariant (temp___expr_218: int) (temp___is_init_214: bool) (temp___skip_constant_215: bool) (temp___do_toplevel_216: bool) (temp___do_typ_inv_217: bool) =
    if ((temp___is_init_214 = True) \/
          (Home__carbon_monoxide.first <= Home__carbon_monoxide.last)) then
      (((Home__carbon_monoxide.dynamic_property Home__carbon_monoxide.first)
          Home__carbon_monoxide.last)
         temp___expr_218)
    else true
  
  val dynamic_invariant (temp___expr_218: int) (temp___is_init_214: bool) (temp___skip_constant_215: bool) (temp___do_toplevel_216: bool) (temp___do_typ_inv_217: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_218 : int))
                      (temp___is_init_214 : bool))
                     (temp___skip_constant_215 : bool))
                    (temp___do_toplevel_216 : bool))
                   (temp___do_typ_inv_217 : bool)) }
  
  predicate default_initial_assumption (temp___expr_219: int) (temp___skip_top_level_220: bool) =
    true
  
  val default_initial_assumption (temp___expr_219: int) (temp___skip_top_level_220: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_219 : int))
                   (temp___skip_top_level_220 : bool)) }
end

module Home__check_carbonmonoxide___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Home__check_carbonmonoxide as Home__check_carbonmonoxide
  use Home__carbon_monoxide as Home__carbon_monoxide
  use Home__carbon_monoxide___axiom as Home__carbon_monoxide___axiom
  
  val check_carbonmonoxide (__void_param: unit) : int
    requires { true }
    ensures { (((result
                   = (Home__check_carbonmonoxide.check_carbonmonoxide ())) /\
                  ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                      result)
                     ())) /\
                 ((((((Home__carbon_monoxide___axiom.dynamic_invariant result)
                        True)
                       False)
                      True)
                     True) /\
                    (([@GP_Pretty_Ada:1123]
                      (((epsilon temp___result_221: int.
                           ((temp___result_221
                               = (Home__check_carbonmonoxide.check_carbonmonoxide
                                    ())) /\
                              ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                                  temp___result_221)
                                 ())))
                          = (0 : int)) \/
                         ((epsilon temp___result_222: int.
                             ((temp___result_222
                                 = (Home__check_carbonmonoxide.check_carbonmonoxide
                                      ())) /\
                                ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                                    temp___result_222)
                                   ())))
                            = (1 : int)))) /\
                       ([@GP_Pretty_Ada:1129]
                        ((epsilon temp___result_223: int.
                            ((temp___result_223
                                = (Home__check_carbonmonoxide.check_carbonmonoxide
                                     ())) /\
                               ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                                   temp___result_223)
                                  ())))
                           = (0 : int)))))) }
  
  axiom check_carbonmonoxide__post_axiom:
    forall __void_param : unit
          [Home__check_carbonmonoxide.check_carbonmonoxide __void_param].
      let result =
        Home__check_carbonmonoxide.check_carbonmonoxide __void_param in
      ((Home__carbon_monoxide.dynamic_property Home__carbon_monoxide.first)
         Home__carbon_monoxide.last)
        result
end

module Home__check_carbonmonoxide__istemperaturestable
  use _gnatprove_standard.Main
  use int.Int
  
  val istemperaturestable : bool__ref
end

module Home__check_carbonmonoxide__arewindowsok
  use _gnatprove_standard.Main
  use int.Int
  
  val arewindowsok : bool__ref
end

module Home__check_carbonmonoxide__fridge_ok
  use _gnatprove_standard.Main
  use int.Int
  
  val fridge_ok : bool__ref
end

module Home__check_carbonmonoxide__oven_ok
  use _gnatprove_standard.Main
  use int.Int
  
  val oven_ok : bool__ref
end

module Home__check_carbonmonoxide__homedata
  use _gnatprove_standard.Main
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  
  val homedata__split_fields : Home__homesettingforenergy.__split_fields__ref
end

module Home__check_carbonmonoxide__istemperaturestable___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Home__check_carbonmonoxide__arewindowsok___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Home__check_carbonmonoxide__fridge_ok___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Home__check_carbonmonoxide__oven_ok___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Home__check_carbonmonoxide__homedata___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Heating_system__temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Heating_system__temperature as Heating_system__temperature
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/
          (Heating_system__temperature.first
             <= Heating_system__temperature.last)) then
      (((Heating_system__temperature.dynamic_property
           Heating_system__temperature.first)
          Heating_system__temperature.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Heating_system__windows___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Heating_system__windows as Heating_system__windows
  
  predicate dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) =
    if ((temp___is_init_169 = True) \/
          (Heating_system__windows.first <= Heating_system__windows.last)) then
      (((Heating_system__windows.dynamic_property
           Heating_system__windows.first)
          Heating_system__windows.last)
         temp___expr_173)
    else true
  
  val dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_173 : int))
                      (temp___is_init_169 : bool))
                     (temp___skip_constant_170 : bool))
                    (temp___do_toplevel_171 : bool))
                   (temp___do_typ_inv_172 : bool)) }
  
  predicate default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) =
    true
  
  val default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_174 : int))
                   (temp___skip_top_level_175 : bool)) }
end

module Kitchen_appliances__fridge___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  
  predicate dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    if ((temp___is_init_176 = True) \/
          (Kitchen_appliances__fridge.first
             <= Kitchen_appliances__fridge.last)) then
      (((Kitchen_appliances__fridge.dynamic_property
           Kitchen_appliances__fridge.first)
          Kitchen_appliances__fridge.last)
         temp___expr_180)
    else true
  
  val dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_180 : int))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) =
    true
  
  val default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_181 : int))
                   (temp___skip_top_level_182 : bool)) }
end

module Kitchen_appliances__oven___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  
  predicate dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) =
    if ((temp___is_init_183 = True) \/
          (Kitchen_appliances__oven.first <= Kitchen_appliances__oven.last)) then
      (((Kitchen_appliances__oven.dynamic_property
           Kitchen_appliances__oven.first)
          Kitchen_appliances__oven.last)
         temp___expr_187)
    else true
  
  val dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_187 : int))
                      (temp___is_init_183 : bool))
                     (temp___skip_constant_184 : bool))
                    (temp___do_toplevel_185 : bool))
                   (temp___do_typ_inv_186 : bool)) }
  
  predicate default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) =
    true
  
  val default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_188 : int))
                   (temp___skip_top_level_189 : bool)) }
end

module Home__check_carbonmonoxide__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Home__homesettingforenergy as Home__homesettingforenergy
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Home__house_temperature___axiom as Home__house_temperature___axiom
  use Home__control_windows___axiom as Home__control_windows___axiom
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  use Home__isfridgeopenorclosed___axiom as Home__isfridgeopenorclosed___axiom
  use Home__isovenopenorclosed___axiom as Home__isovenopenorclosed___axiom
  use Home__check_carbonmonoxide as Home__check_carbonmonoxide
  use Home__check_carbonmonoxide___axiom as Home__check_carbonmonoxide___axiom
  use Home__check_carbonmonoxide__istemperaturestable as Home__check_carbonmonoxide__istemperaturestable
  use Home__check_carbonmonoxide__arewindowsok as Home__check_carbonmonoxide__arewindowsok
  use Home__check_carbonmonoxide__fridge_ok as Home__check_carbonmonoxide__fridge_ok
  use Home__check_carbonmonoxide__oven_ok as Home__check_carbonmonoxide__oven_ok
  use Home__check_carbonmonoxide__homedata as Home__check_carbonmonoxide__homedata
  use Heating_system__temperature as Heating_system__temperature
  use Heating_system__temperature__rep as Heating_system__temperature__rep
  use Heating_system__windows as Heating_system__windows
  use Heating_system__windows__rep as Heating_system__windows__rep
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use Kitchen_appliances__fridge__rep as Kitchen_appliances__fridge__rep
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use Kitchen_appliances__oven__rep as Kitchen_appliances__oven__rep
  use Home__check_carbonmonoxide__istemperaturestable___axiom as Home__check_carbonmonoxide__istemperaturestable___axiom
  use Home__check_carbonmonoxide__arewindowsok___axiom as Home__check_carbonmonoxide__arewindowsok___axiom
  use Home__check_carbonmonoxide__fridge_ok___axiom as Home__check_carbonmonoxide__fridge_ok___axiom
  use Home__check_carbonmonoxide__oven_ok___axiom as Home__check_carbonmonoxide__oven_ok___axiom
  use Home__check_carbonmonoxide__homedata___axiom as Home__check_carbonmonoxide__homedata___axiom
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Home__carbon_monoxide___axiom as Home__carbon_monoxide___axiom
  use Home__house_temperature___axiom as Home__house_temperature___axiom
  use Home__control_windows___axiom as Home__control_windows___axiom
  use Home__isfridgeopenorclosed___axiom as Home__isfridgeopenorclosed___axiom
  use Home__isovenopenorclosed___axiom as Home__isovenopenorclosed___axiom
  use Home__check_carbonmonoxide___axiom as Home__check_carbonmonoxide___axiom
  use Heating_system__temperature___axiom as Heating_system__temperature___axiom
  use Heating_system__windows___axiom as Heating_system__windows___axiom
  use Kitchen_appliances__fridge___axiom as Kitchen_appliances__fridge___axiom
  use Kitchen_appliances__oven___axiom as Kitchen_appliances__oven___axiom
  use Kitchen_appliances__not_open___axiom as Kitchen_appliances__not_open___axiom
  
  val home__check_carbonmonoxide__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"home.ads" 30 0 0] true }
    ensures { [#"home.ads" 30 0 0]
              [#"home.ads" 31 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:home.ads:31:14]
              [@GP_Shape:pragargs__andthen]
              [@model_vc_post]
              [@comment:     Post => (Check_CarbonMonoxide = Safe or Check_CarbonMonoxide = Unsafe) and then              ^ home.ads:31:14:VC_POSTCONDITION]
              [@GP_Id:8]
              (([@GP_Pretty_Ada:1123]
                [@GP_Sloc:home.ads:31:14]
                (((epsilon temp___result_252: int.
                     ((temp___result_252
                         = (Home__check_carbonmonoxide.check_carbonmonoxide
                              ())) /\
                        ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                            temp___result_252)
                           ())))
                    = (0 : int)) \/
                   ((epsilon temp___result_253: int.
                       ((temp___result_253
                           = (Home__check_carbonmonoxide.check_carbonmonoxide
                                ())) /\
                          ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                              temp___result_253)
                             ())))
                      = (1 : int)))) /\
                 ([@GP_Pretty_Ada:1129]
                  [@GP_Sloc:home.ads:32:14]
                  ((epsilon temp___result_254: int.
                      ((temp___result_254
                          = (Home__check_carbonmonoxide.check_carbonmonoxide
                               ())) /\
                         ((Home__check_carbonmonoxide.check_carbonmonoxide__function_guard
                             temp___result_254)
                            ())))
                     = (0 : int)))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram home.ads:30]
      ());
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram home.ads:30]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram home.ads:30]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram home.ads:30] ());
     (try
        ([#"home.adb" 48 0 0]
         [#"home.adb" 48 0 0]
         (Home__check_carbonmonoxide__istemperaturestable.istemperaturestable.bool__content <-
            (Boolean.of_int (0 : int))));
        ([#"home.adb" 49 0 0]
         [#"home.adb" 49 0 0]
         (Home__check_carbonmonoxide__arewindowsok.arewindowsok.bool__content <-
            (Boolean.of_int (0 : int))));
        ([#"home.adb" 50 0 0]
         [#"home.adb" 50 0 0]
         (Home__check_carbonmonoxide__fridge_ok.fridge_ok.bool__content <-
            (Boolean.of_int (0 : int))));
        ([#"home.adb" 51 0 0]
         [#"home.adb" 51 0 0]
         (Home__check_carbonmonoxide__oven_ok.oven_ok.bool__content <-
            (Boolean.of_int (0 : int))));
        ([#"home.adb" 52 0 0]
         (([#"home.adb" 52 0 0]
           (begin
              ensures { true }
              let _ =
                let _ =
                  let temp___236 =
                    [#"home.adb" 52 0 0]
                    (val _f : Home__homesettingforenergy.homesettingforenergy
                       ensures { [#"home.adb" 52 0 0] true } in
                     _f) in
                  (if (Home__homesettingforenergy.home__homesettingforenergy__fridgestatus__pred
                         temp___236) then
                     ([#"home.adb" 52 0 0] ())
                   else ());
                  (if (Home__homesettingforenergy.home__homesettingforenergy__ovenstatus__pred
                         temp___236) then
                     ([#"home.adb" 52 0 0] ())
                   else ()) in
                () in
              ()
            end));
          ([#"home.adb" 52 0 0]
           assume {
             [#"home.adb" 52 0 0]
             ((Home__homesettingforenergy___axiom.default_initial_assumption
                 { Home__homesettingforenergy.__split_fields =
                     (Home__homesettingforenergy.__split_fields__content
                         Home__check_carbonmonoxide__homedata.homedata__split_fields) })
                False) });
          ([#"home.adb" 52 0 0]
           assume {
             [#"home.adb" 52 0 0]
             (((((Home__homesettingforenergy___axiom.dynamic_invariant
                    { Home__homesettingforenergy.__split_fields =
                        (Home__homesettingforenergy.__split_fields__content
                            Home__check_carbonmonoxide__homedata.homedata__split_fields) })
                   False)
                  False)
                 True)
                True) })));
        ([@GP_Sloc:home.adb:55:25] [#"home.adb" 55 0 0] ());
        ([@GP_Sloc:home.adb:55:7] [#"home.adb" 55 0 0] ());
        ([@GP_Sloc:home.adb:55:7]
         [#"home.adb" 55 0 0]
         (let temp___compl_240 =
            { Home__homesettingforenergy.__split_fields =
                (Home__homesettingforenergy.__split_fields__content
                    Home__check_carbonmonoxide__homedata.homedata__split_fields) } in
          ([#"home.adb" 55 0 0] (val _f : unit in
                                 _f));
          ([#"home.adb" 55 0 0]
           [@GP_Shape:call_house_temperature]
           [@GP_Reason:VC_PRECONDITION]
           [@vc:annotation]
           [@GP_Sloc:home.adb:55:7]
           [@comment:      House_Temperature(HomeData);       ^ home.adb:55:7:VC_PRECONDITION]
           [@GP_Id:6]
           (Home__house_temperature___axiom.house_temperature
              Home__check_carbonmonoxide__homedata.homedata__split_fields))));
        ([@GP_Sloc:home.adb:57:7] [#"home.adb" 57 0 0] ());
        ([@GP_Sloc:home.adb:57:30] [#"home.adb" 57 0 0] ());
        ([@GP_Sloc:home.adb:58:30] [#"home.adb" 58 0 0] ());
        ([@GP_Sloc:home.adb:57:27]
         [#"home.adb" 57 0 0]
         [#"home.adb" 57 0 0]
         (Home__check_carbonmonoxide__istemperaturestable.istemperaturestable.bool__content <-
            ((Boolean.andb
                ((Heating_system__temperature__rep.to_rep
                    ((Home__homesettingforenergy.__split_fields
                         { Home__homesettingforenergy.__split_fields =
                             (Home__homesettingforenergy.__split_fields__content
                                 Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
                       Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                   >= (17 : int)))
               ((Heating_system__temperature__rep.to_rep
                   ((Home__homesettingforenergy.__split_fields
                        { Home__homesettingforenergy.__split_fields =
                            (Home__homesettingforenergy.__split_fields__content
                                Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
                      Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                  <= (19 : int)))));
        ([@GP_Sloc:home.adb:61:23] [#"home.adb" 61 0 0] ());
        ([@GP_Sloc:home.adb:61:7] [#"home.adb" 61 0 0] ());
        ([@GP_Sloc:home.adb:61:7]
         [#"home.adb" 61 0 0]
         (let temp___compl_242 =
            { Home__homesettingforenergy.__split_fields =
                (Home__homesettingforenergy.__split_fields__content
                    Home__check_carbonmonoxide__homedata.homedata__split_fields) } in
          ([#"home.adb" 61 0 0] (val _f : unit in
                                 _f));
          ([#"home.adb" 61 0 0]
           [@GP_Reason:VC_PRECONDITION]
           [@GP_Shape:call_control_windows]
           [@vc:annotation]
           [@comment:      Control_Windows(HomeData);       ^ home.adb:61:7:VC_PRECONDITION]
           [@GP_Id:7]
           [@GP_Sloc:home.adb:61:7]
           (Home__control_windows___axiom.control_windows
              Home__check_carbonmonoxide__homedata.homedata__split_fields))));
        ([@GP_Sloc:home.adb:62:7] [#"home.adb" 62 0 0] ());
        ([@GP_Sloc:home.adb:62:23] [#"home.adb" 62 0 0] ());
        ([@GP_Sloc:home.adb:62:20]
         [#"home.adb" 62 0 0]
         [#"home.adb" 62 0 0]
         (Home__check_carbonmonoxide__arewindowsok.arewindowsok.bool__content <-
            ((Heating_system__windows__rep.to_rep
                ((Home__homesettingforenergy.__split_fields
                     { Home__homesettingforenergy.__split_fields =
                         (Home__homesettingforenergy.__split_fields__content
                             Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
                   Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus))
               = (1 : int))));
        ([@GP_Sloc:home.adb:66:7] [#"home.adb" 66 0 0] ());
        ([@GP_Sloc:home.adb:66:7]
         [#"home.adb" 66 0 0]
         (let temp___compl_244 =
            (Home__homesettingforenergy.__split_fields
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
              Home__homesettingforenergy.rec__home__homesettingforenergy__fridgestatus in
          [#"home.adb" 66 0 0]
          (let fr__split_fields =
             { Kitchen_appliances__not_open.__split_fields__content =
                 (Kitchen_appliances__not_open.__split_fields
                     temp___compl_244) } in
           ([#"home.adb" 66 0 0] (val _f : unit in
                                  _f));
           (Home__isfridgeopenorclosed___axiom.isfridgeopenorclosed
              fr__split_fields);
           (let temp___246 =
              let temp___245 =
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__check_carbonmonoxide__homedata.homedata__split_fields) } in
              ([#"home.adb" 66 0 0]
               (begin
                  ensures { true }
                  let _ =
                    let _ =
                      (Home__homesettingforenergy.__split_fields temp___245).
                        Home__homesettingforenergy.rec__home__homesettingforenergy__fridgestatus in
                    () in
                  ()
                end));
              ({ temp___245 with
                 Home__homesettingforenergy.__split_fields =
                   ({ (Home__homesettingforenergy.__split_fields temp___245) with
                      Home__homesettingforenergy.rec__home__homesettingforenergy__fridgestatus =
                        { Kitchen_appliances__not_open.__split_fields =
                            (Kitchen_appliances__not_open.__split_fields__content
                                fr__split_fields) } }) }) in
            [#"home.adb" 66 0 0]
            (Home__check_carbonmonoxide__homedata.homedata__split_fields.
               Home__homesettingforenergy.__split_fields__content <-
               (Home__homesettingforenergy.__split_fields temp___246))))));
        ([@GP_Sloc:home.adb:67:7] [#"home.adb" 67 0 0] ());
        ([@GP_Sloc:home.adb:67:20] [#"home.adb" 67 0 0] ());
        ([@GP_Sloc:home.adb:67:17]
         [#"home.adb" 67 0 0]
         [#"home.adb" 67 0 0]
         (Home__check_carbonmonoxide__fridge_ok.fridge_ok.bool__content <-
            ((Kitchen_appliances__fridge__rep.to_rep
                ((Kitchen_appliances__not_open.__split_fields
                     ((Home__homesettingforenergy.__split_fields
                          { Home__homesettingforenergy.__split_fields =
                              (Home__homesettingforenergy.__split_fields__content
                                  Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
                        Home__homesettingforenergy.rec__home__homesettingforenergy__fridgestatus)).
                   Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__f))
               = (0 : int))));
        ([@GP_Sloc:home.adb:71:7] [#"home.adb" 71 0 0] ());
        ([@GP_Sloc:home.adb:71:7]
         [#"home.adb" 71 0 0]
         (let temp___compl_248 =
            (Home__homesettingforenergy.__split_fields
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
              Home__homesettingforenergy.rec__home__homesettingforenergy__ovenstatus in
          [#"home.adb" 71 0 0]
          (let ov__split_fields =
             { Kitchen_appliances__not_open.__split_fields__content =
                 (Kitchen_appliances__not_open.__split_fields
                     temp___compl_248) } in
           ([#"home.adb" 71 0 0] (val _f : unit in
                                  _f));
           (Home__isovenopenorclosed___axiom.isovenopenorclosed
              ov__split_fields);
           (let temp___250 =
              let temp___249 =
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__check_carbonmonoxide__homedata.homedata__split_fields) } in
              ([#"home.adb" 71 0 0]
               (begin
                  ensures { true }
                  let _ =
                    let _ =
                      (Home__homesettingforenergy.__split_fields temp___249).
                        Home__homesettingforenergy.rec__home__homesettingforenergy__ovenstatus in
                    () in
                  ()
                end));
              ({ temp___249 with
                 Home__homesettingforenergy.__split_fields =
                   ({ (Home__homesettingforenergy.__split_fields temp___249) with
                      Home__homesettingforenergy.rec__home__homesettingforenergy__ovenstatus =
                        { Kitchen_appliances__not_open.__split_fields =
                            (Kitchen_appliances__not_open.__split_fields__content
                                ov__split_fields) } }) }) in
            [#"home.adb" 71 0 0]
            (Home__check_carbonmonoxide__homedata.homedata__split_fields.
               Home__homesettingforenergy.__split_fields__content <-
               (Home__homesettingforenergy.__split_fields temp___250))))));
        ([@GP_Sloc:home.adb:72:7] [#"home.adb" 72 0 0] ());
        ([@GP_Sloc:home.adb:72:18] [#"home.adb" 72 0 0] ());
        ([@GP_Sloc:home.adb:72:15]
         [#"home.adb" 72 0 0]
         [#"home.adb" 72 0 0]
         (Home__check_carbonmonoxide__oven_ok.oven_ok.bool__content <-
            ((Kitchen_appliances__oven__rep.to_rep
                ((Kitchen_appliances__not_open.__split_fields
                     ((Home__homesettingforenergy.__split_fields
                          { Home__homesettingforenergy.__split_fields =
                              (Home__homesettingforenergy.__split_fields__content
                                  Home__check_carbonmonoxide__homedata.homedata__split_fields) }).
                        Home__homesettingforenergy.rec__home__homesettingforenergy__ovenstatus)).
                   Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__o))
               = (1 : int))));
        ([@GP_Sloc:home.adb:77:10] [#"home.adb" 77 0 0] ());
        ([@GP_Sloc:home.adb:77:34] [#"home.adb" 77 0 0] ());
        ([@GP_Sloc:home.adb:77:51] [#"home.adb" 77 0 0] ());
        ([@GP_Sloc:home.adb:77:65] [#"home.adb" 77 0 0] ());
        ([@GP_Sloc:home.adb:77:7]
         [#"home.adb" 77 0 0]
         (if (([#"home.adb" 77 0 0]
               [#"home.adb" 77 0 0]
               (([@branch_id=961] Main.spark__branch).bool__content <-
                  ((Boolean.andb
                      ((Boolean.andb
                          ((Boolean.andb
                              (Home__check_carbonmonoxide__istemperaturestable.istemperaturestable.bool__content))
                             (Home__check_carbonmonoxide__arewindowsok.arewindowsok.bool__content)))
                         (Home__check_carbonmonoxide__fridge_ok.fridge_ok.bool__content)))
                     (Home__check_carbonmonoxide__oven_ok.oven_ok.bool__content))));
              (([@branch_id=961] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:home.adb:78:8]
             [#"home.adb" 78 0 0]
             (([#"home.adb" 78 0 0]
               (home__check_carbonmonoxide__result.int__content <- (0 : int)));
              ([#"home.adb" 78 0 0] ((raise Return__exc) : unit))))
          else
            ([@GP_Sloc:home.adb:80:10]
             [#"home.adb" 80 0 0]
             (([#"home.adb" 80 0 0]
               (home__check_carbonmonoxide__result.int__content <- (1 : int)));
              ([#"home.adb" 80 0 0] ((raise Return__exc) : unit))))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Boolean.orb
                ((Home__check_carbonmonoxide___axiom.check_carbonmonoxide ())
                   = (0 : int)))
               ((Home__check_carbonmonoxide___axiom.check_carbonmonoxide ())
                  = (1 : int)))
             &&
              ((Home__check_carbonmonoxide___axiom.check_carbonmonoxide ())
                 = (0 : int)) in
          () in
        ()
      end);
     (home__check_carbonmonoxide__result.int__content))
end
