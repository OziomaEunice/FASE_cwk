(* Module for axiomatizing type "fridge" defined at kitchen_appliances.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Kitchen_appliances__fridge
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type fridge  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = fridge,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type fridge__ref  = { mutable fridge__content : fridge }
  
  function   fridge__ref_fridge__content__projection (a : fridge__ref)
    requires {  } ensures  {  } returns fridge = a.fridge__content
  
  meta model_projection function fridge__ref_fridge__content__projection
  
  meta inline:no function fridge__ref_fridge__content__projection
  
  function   fridge__havoc (x : fridge__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "fridge" defined at kitchen_appliances.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Kitchen_appliances__fridge__rep
  
  use        Kitchen_appliances__fridge
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Kitchen_appliances__fridge.fridge,
    predicate in_range = Kitchen_appliances__fridge.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "oven" defined at kitchen_appliances.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Kitchen_appliances__oven
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type oven  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = oven,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type oven__ref  = { mutable oven__content : oven }
  
  function   oven__ref_oven__content__projection (a : oven__ref) requires
    {  } ensures  {  } returns oven = a.oven__content
  
  meta model_projection function oven__ref_oven__content__projection
  
  meta inline:no function oven__ref_oven__content__projection
  
  function   oven__havoc (x : oven__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "oven" defined at kitchen_appliances.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Kitchen_appliances__oven__rep
  
  use        Kitchen_appliances__oven
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Kitchen_appliances__oven.oven,
    predicate in_range = Kitchen_appliances__oven.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "not_open" defined at kitchen_appliances.ads:6, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Kitchen_appliances__not_open__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Kitchen_appliances__fridge
  use        Kitchen_appliances__fridge__rep
  use        Kitchen_appliances__oven
  use        Kitchen_appliances__oven__rep
  
  type __split_fields  = { [model_trace:.1275]
                           [name:F]rec__kitchen_appliances__not_open__f : Kitchen_appliances__fridge.fridge;
                           [model_trace:.1280]
                           [name:O]rec__kitchen_appliances__not_open__o : Kitchen_appliances__oven.oven }
  
  function [model_trace:.1275] [name:F] 
    __split_fields_rec__kitchen_appliances__not_open__f__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Kitchen_appliances__fridge.fridge = a.rec__kitchen_appliances__not_open__f
  
  meta model_projection function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  meta inline:no function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  function [model_trace:.1280] [name:O] 
    __split_fields_rec__kitchen_appliances__not_open__o__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Kitchen_appliances__oven.oven = a.rec__kitchen_appliances__not_open__o
  
  meta model_projection function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  meta inline:no function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   kitchen_appliances__not_open__f__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__kitchen_appliances__not_open__f_ (a : __rep) requires
    { (kitchen_appliances__not_open__f__pred a) } ensures 
    { (result = a.__split_fields.rec__kitchen_appliances__not_open__f) }
    returns Kitchen_appliances__fridge.fridge
  
  function   kitchen_appliances__not_open__o__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__kitchen_appliances__not_open__o_ (a : __rep) requires
    { (kitchen_appliances__not_open__o__pred a) } ensures 
    { (result = a.__split_fields.rec__kitchen_appliances__not_open__o) }
    returns Kitchen_appliances__oven.oven
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Kitchen_appliances__fridge__rep.to_rep
                a.__split_fields.rec__kitchen_appliances__not_open__f)
               = (Kitchen_appliances__fridge__rep.to_rep
                    b.__split_fields.rec__kitchen_appliances__not_open__f))
              /\
              ((Kitchen_appliances__oven__rep.to_rep
                  a.__split_fields.rec__kitchen_appliances__not_open__o)
                 = (Kitchen_appliances__oven__rep.to_rep
                      b.__split_fields.rec__kitchen_appliances__not_open__o)))
           then True  else False)

end

(* Module for axiomatizing type "not_open" defined at kitchen_appliances.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Kitchen_appliances__not_open
  
  use export Kitchen_appliances__not_open__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type not_open  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   kitchen_appliances__not_open__f__first__bit () requires {  }
    ensures  {  } returns int
  
  function   kitchen_appliances__not_open__f__last__bit () requires {  }
    ensures  {  } returns int
  
  function   kitchen_appliances__not_open__f__position () requires {  }
    ensures  {  } returns int
  
  axiom kitchen_appliances__not_open__f__first__bit_axiom : ((kitchen_appliances__not_open__f__first__bit
                                                                ) >= 0)
  
  axiom kitchen_appliances__not_open__f__last__bit_axiom : ((kitchen_appliances__not_open__f__last__bit
                                                               )
                                                              > (kitchen_appliances__not_open__f__first__bit
                                                                   ))
  
  axiom kitchen_appliances__not_open__f__position_axiom : ((kitchen_appliances__not_open__f__position
                                                              ) >= 0)
  
  function   kitchen_appliances__not_open__o__first__bit () requires {  }
    ensures  {  } returns int
  
  function   kitchen_appliances__not_open__o__last__bit () requires {  }
    ensures  {  } returns int
  
  function   kitchen_appliances__not_open__o__position () requires {  }
    ensures  {  } returns int
  
  axiom kitchen_appliances__not_open__o__first__bit_axiom : ((kitchen_appliances__not_open__o__first__bit
                                                                ) >= 0)
  
  axiom kitchen_appliances__not_open__o__last__bit_axiom : ((kitchen_appliances__not_open__o__last__bit
                                                               )
                                                              > (kitchen_appliances__not_open__o__first__bit
                                                                   ))
  
  axiom kitchen_appliances__not_open__o__position_axiom : ((kitchen_appliances__not_open__o__position
                                                              ) >= 0)
  
  function   user_eq (a : not_open b : not_open) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns not_open
  
  type not_open__ref  = { mutable not_open__content : not_open }
  
  function   not_open__ref_not_open__content__projection (a : not_open__ref)
    requires {  } ensures  {  } returns not_open = a.not_open__content
  
  meta model_projection function not_open__ref_not_open__content__projection
  
  meta inline:no function not_open__ref_not_open__content__projection
  
  function   not_open__havoc (x : not_open__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "temperature" defined at heating_system.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Heating_system__temperature
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type temperature  = <range 0 40>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 40
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = temperature,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type temperature__ref  = { mutable temperature__content : temperature }
  
  function   temperature__ref_temperature__content__projection
    (a : temperature__ref) requires {  } ensures  {  } returns
    temperature = a.temperature__content
  
  meta model_projection function temperature__ref_temperature__content__projection
  
  meta inline:no function temperature__ref_temperature__content__projection
  
  function   temperature__havoc (x : temperature__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "temperature" defined at heating_system.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Heating_system__temperature__rep
  
  use        Heating_system__temperature
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Heating_system__temperature.temperature) requires
    { True } ensures  { True } returns
    int = (Heating_system__temperature.temperature'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Heating_system__temperature.temperature,
    predicate in_range = Heating_system__temperature.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "windows" defined at heating_system.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Heating_system__windows
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type windows  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = windows,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type windows__ref  = { mutable windows__content : windows }
  
  function   windows__ref_windows__content__projection (a : windows__ref)
    requires {  } ensures  {  } returns windows = a.windows__content
  
  meta model_projection function windows__ref_windows__content__projection
  
  meta inline:no function windows__ref_windows__content__projection
  
  function   windows__havoc (x : windows__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "windows" defined at heating_system.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Heating_system__windows__rep
  
  use        Heating_system__windows
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Heating_system__windows.windows,
    predicate in_range = Heating_system__windows.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "homesettingforenergy" defined at home.ads:6, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Home__homesettingforenergy__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Kitchen_appliances__not_open
  use        Heating_system__temperature
  use        Heating_system__temperature__rep
  use        Heating_system__windows
  use        Heating_system__windows__rep
  
  type __split_fields  = { [name:TemperatureSetting]
                           [model_trace:.1025]rec__home__homesettingforenergy__temperaturesetting : Heating_system__temperature.temperature;
                           [model_trace:.1030]
                           [name:WindowsStatus]rec__home__homesettingforenergy__windowsstatus : Heating_system__windows.windows;
                           [model_trace:.1034]
                           [name:FridgeStatus]rec__home__homesettingforenergy__fridgestatus : Kitchen_appliances__not_open.not_open;
                           [model_trace:.1038]
                           [name:OvenStatus]rec__home__homesettingforenergy__ovenstatus : Kitchen_appliances__not_open.not_open }
  
  function [name:TemperatureSetting] [model_trace:.1025] 
    __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Heating_system__temperature.temperature = a.rec__home__homesettingforenergy__temperaturesetting
  
  meta model_projection function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  meta inline:no function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  function [model_trace:.1030] [name:WindowsStatus] 
    __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Heating_system__windows.windows = a.rec__home__homesettingforenergy__windowsstatus
  
  meta model_projection function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  meta inline:no function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  function [model_trace:.1034] [name:FridgeStatus] 
    __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Kitchen_appliances__not_open.not_open = a.rec__home__homesettingforenergy__fridgestatus
  
  meta model_projection function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  meta inline:no function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  function [model_trace:.1038] [name:OvenStatus] 
    __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Kitchen_appliances__not_open.not_open = a.rec__home__homesettingforenergy__ovenstatus
  
  meta model_projection function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  meta inline:no function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   home__homesettingforenergy__temperaturesetting__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__home__homesettingforenergy__temperaturesetting_ (a : __rep)
    requires { (home__homesettingforenergy__temperaturesetting__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__home__homesettingforenergy__temperaturesetting) }
    returns Heating_system__temperature.temperature
  
  function   home__homesettingforenergy__windowsstatus__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__home__homesettingforenergy__windowsstatus_ (a : __rep)
    requires { (home__homesettingforenergy__windowsstatus__pred a) } ensures 
    { (result
         = a.__split_fields.rec__home__homesettingforenergy__windowsstatus) }
    returns Heating_system__windows.windows
  
  function   home__homesettingforenergy__fridgestatus__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__home__homesettingforenergy__fridgestatus_ (a : __rep)
    requires { (home__homesettingforenergy__fridgestatus__pred a) } ensures 
    { (result
         = a.__split_fields.rec__home__homesettingforenergy__fridgestatus) }
    returns Kitchen_appliances__not_open.not_open
  
  function   home__homesettingforenergy__ovenstatus__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__home__homesettingforenergy__ovenstatus_ (a : __rep)
    requires { (home__homesettingforenergy__ovenstatus__pred a) } ensures 
    { (result = a.__split_fields.rec__home__homesettingforenergy__ovenstatus) }
    returns Kitchen_appliances__not_open.not_open
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Heating_system__temperature__rep.to_rep
                a.__split_fields.rec__home__homesettingforenergy__temperaturesetting)
               = (Heating_system__temperature__rep.to_rep
                    b.__split_fields.rec__home__homesettingforenergy__temperaturesetting))
              /\
              ((Heating_system__windows__rep.to_rep
                  a.__split_fields.rec__home__homesettingforenergy__windowsstatus)
                 = (Heating_system__windows__rep.to_rep
                      b.__split_fields.rec__home__homesettingforenergy__windowsstatus))
              /\
              (Kitchen_appliances__not_open.bool_eq
                 a.__split_fields.rec__home__homesettingforenergy__fridgestatus
                 b.__split_fields.rec__home__homesettingforenergy__fridgestatus)
              /\
              (Kitchen_appliances__not_open.bool_eq
                 a.__split_fields.rec__home__homesettingforenergy__ovenstatus
                 b.__split_fields.rec__home__homesettingforenergy__ovenstatus))
           then True  else False)

end

(* Module for axiomatizing type "homesettingforenergy" defined at home.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Home__homesettingforenergy
  
  use export Home__homesettingforenergy__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type homesettingforenergy  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   home__homesettingforenergy__temperaturesetting__first__bit 
    () requires {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__temperaturesetting__last__bit 
    () requires {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__temperaturesetting__position 
    () requires {  } ensures  {  } returns int
  
  axiom home__homesettingforenergy__temperaturesetting__first__bit_axiom : 
  ((home__homesettingforenergy__temperaturesetting__first__bit ) >= 0)
  
  axiom home__homesettingforenergy__temperaturesetting__last__bit_axiom : 
  ((home__homesettingforenergy__temperaturesetting__last__bit )
     > (home__homesettingforenergy__temperaturesetting__first__bit ))
  
  axiom home__homesettingforenergy__temperaturesetting__position_axiom : 
  ((home__homesettingforenergy__temperaturesetting__position ) >= 0)
  
  function   home__homesettingforenergy__windowsstatus__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__windowsstatus__last__bit () requires
    {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__windowsstatus__position () requires
    {  } ensures  {  } returns int
  
  axiom home__homesettingforenergy__windowsstatus__first__bit_axiom : 
  ((home__homesettingforenergy__windowsstatus__first__bit ) >= 0)
  
  axiom home__homesettingforenergy__windowsstatus__last__bit_axiom : 
  ((home__homesettingforenergy__windowsstatus__last__bit )
     > (home__homesettingforenergy__windowsstatus__first__bit ))
  
  axiom home__homesettingforenergy__windowsstatus__position_axiom : ((home__homesettingforenergy__windowsstatus__position
                                                                    ) >= 0)
  
  function   home__homesettingforenergy__fridgestatus__first__bit () requires
    {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__fridgestatus__last__bit () requires
    {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__fridgestatus__position () requires
    {  } ensures  {  } returns int
  
  axiom home__homesettingforenergy__fridgestatus__first__bit_axiom : 
  ((home__homesettingforenergy__fridgestatus__first__bit ) >= 0)
  
  axiom home__homesettingforenergy__fridgestatus__last__bit_axiom : ((home__homesettingforenergy__fridgestatus__last__bit
                                                                    )
                                                                    > (home__homesettingforenergy__fridgestatus__first__bit
                                                                    ))
  
  axiom home__homesettingforenergy__fridgestatus__position_axiom : ((home__homesettingforenergy__fridgestatus__position
                                                                    ) >= 0)
  
  function   home__homesettingforenergy__ovenstatus__first__bit () requires
    {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__ovenstatus__last__bit () requires
    {  } ensures  {  } returns int
  
  function   home__homesettingforenergy__ovenstatus__position () requires
    {  } ensures  {  } returns int
  
  axiom home__homesettingforenergy__ovenstatus__first__bit_axiom : ((home__homesettingforenergy__ovenstatus__first__bit
                                                                    ) >= 0)
  
  axiom home__homesettingforenergy__ovenstatus__last__bit_axiom : ((home__homesettingforenergy__ovenstatus__last__bit
                                                                    )
                                                                    > (
                                                                    home__homesettingforenergy__ovenstatus__first__bit
                                                                    ))
  
  axiom home__homesettingforenergy__ovenstatus__position_axiom : ((home__homesettingforenergy__ovenstatus__position
                                                                    ) >= 0)
  
  function   user_eq (a : homesettingforenergy b : homesettingforenergy)
    requires { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns
    homesettingforenergy
  
  type homesettingforenergy__ref  = { mutable homesettingforenergy__content : homesettingforenergy }
  
  function  
    homesettingforenergy__ref_homesettingforenergy__content__projection
    (a : homesettingforenergy__ref) requires {  } ensures  {  } returns
    homesettingforenergy = a.homesettingforenergy__content
  
  meta model_projection function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  meta inline:no function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  function   homesettingforenergy__havoc (x : homesettingforenergy__ref)
    requires {  } ensures  {  } returns unit

end

(* Module giving axioms for type "homesettingforenergy" defined at home.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Home__homesettingforenergy___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Home__homesettingforenergy
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_202) : Home__homesettingforenergy.homesettingforenergy
    ([mlw:proxy_symbol] [introduced] temp___is_init_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_199) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_200) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_201) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_203) : Home__homesettingforenergy.homesettingforenergy
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_204) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "house_temperature" defined at home.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Home__house_temperature___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Home__homesettingforenergy
  use        Home__homesettingforenergy___axiom
  use        Heating_system__temperature
  use        Heating_system__temperature__rep
  
  function   house_temperature
    (ht__split_fields : Home__homesettingforenergy.__split_fields__ref)
    requires
    { ([GP_Pretty_Ada:1473] (((Heating_system__temperature__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                < 17) \/
                               ((Heating_system__temperature__rep.to_rep
                                   ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                  > 19))) } ensures 
    { ((([GP_Pretty_Ada:1078] ((Heating_system__temperature__rep.to_rep
                                  ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                 >= 17)) /\
          ([GP_Pretty_Ada:1084] ((Heating_system__temperature__rep.to_rep
                                    ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                   <= 19))) /\
         (Home__homesettingforenergy___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "control_windows" defined at home.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Home__control_windows___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Home__homesettingforenergy
  use        Home__homesettingforenergy___axiom
  use        Heating_system__windows
  use        Heating_system__windows__rep
  
  function   control_windows
    (ch__split_fields : Home__homesettingforenergy.__split_fields__ref)
    requires
    { ([GP_Pretty_Ada:1512] (((Heating_system__windows__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus)
                                = 1) \/
                               ((Heating_system__windows__rep.to_rep
                                   ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus)
                                  = 0))) } ensures 
    { (([GP_Pretty_Ada:1524] ((Heating_system__windows__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus)
                                = 1)) /\
         (Home__homesettingforenergy___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module giving axioms for type "not_open" defined at kitchen_appliances.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Kitchen_appliances__not_open___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Kitchen_appliances__not_open
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_193) : Kitchen_appliances__not_open.not_open
    ([mlw:proxy_symbol] [introduced] temp___is_init_189) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_190) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_192) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_194) : Kitchen_appliances__not_open.not_open
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_195) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "isfridgeopenorclosed" defined at home.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Home__isfridgeopenorclosed___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Kitchen_appliances__not_open
  use        Kitchen_appliances__not_open___axiom
  use        Kitchen_appliances__fridge
  use        Kitchen_appliances__fridge__rep
  
  function   isfridgeopenorclosed
    (fr__split_fields : Kitchen_appliances__not_open.__split_fields__ref)
    requires { True } ensures 
    { (([GP_Pretty_Ada:1539] ((Kitchen_appliances__fridge__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Kitchen_appliances__not_open.__split_fields.Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__f)
                                = 0)) /\
         (Kitchen_appliances__not_open___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "isovenopenorclosed" defined at home.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Home__isovenopenorclosed___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Kitchen_appliances__not_open
  use        Kitchen_appliances__not_open___axiom
  use        Kitchen_appliances__oven
  use        Kitchen_appliances__oven__rep
  
  function   isovenopenorclosed
    (ov__split_fields : Kitchen_appliances__not_open.__split_fields__ref)
    requires { True } ensures 
    { (([GP_Pretty_Ada:1553] ((Kitchen_appliances__oven__rep.to_rep
                                 ( --pp_record_aggregate NOT IMPLEMENTED).Kitchen_appliances__not_open.__split_fields.Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__o)
                                = 0)) /\
         (Kitchen_appliances__not_open___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for defining a ref holding the value of variable "cm" defined at home.ads:30, created in Gnat2Why.Decls.Translate_Variable *)
module Home__checklevelofcarbonmonoxide__cm
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val cm [model_projected] [model_trace:1145]
  [name:cm] [sloc:home.ads:30]: int

end

(* Module for defining a ref holding the value of variable "house_temp_result" defined at home.adb:50, created in Gnat2Why.Decls.Translate_Variable *)
module Home__checklevelofcarbonmonoxide__house_temp_result
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Home__homesettingforenergy
  
  val house_temp_result__split_fields [model_projected] [model_trace:887]
  [name:House_Temp_Result] [sloc:home.adb:50]: Home__homesettingforenergy.__split_fields

end

(* Module for defining a ref holding the value of variable "windows_result" defined at home.adb:54, created in Gnat2Why.Decls.Translate_Variable *)
module Home__checklevelofcarbonmonoxide__windows_result
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Home__homesettingforenergy
  
  val windows_result__split_fields [model_projected] [name:Windows_Result]
  [model_trace:916] [sloc:home.adb:54]: Home__homesettingforenergy.__split_fields

end

(* Module for defining a ref holding the value of variable "fridge_result" defined at home.adb:58, created in Gnat2Why.Decls.Translate_Variable *)
module Home__checklevelofcarbonmonoxide__fridge_result
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Kitchen_appliances__not_open
  
  val fridge_result__split_fields [model_projected] [name:Fridge_Result]
  [model_trace:944] [sloc:home.adb:58]: Kitchen_appliances__not_open.__split_fields

end

(* Module for defining a ref holding the value of variable "oven_result" defined at home.adb:59, created in Gnat2Why.Decls.Translate_Variable *)
module Home__checklevelofcarbonmonoxide__oven_result
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Kitchen_appliances__not_open
  
  val oven_result__split_fields [model_trace:947] [model_projected]
  [name:Oven_Result] [sloc:home.adb:59]: Kitchen_appliances__not_open.__split_fields

end

(* Module for axiomatizing type "carbon_monoxide" defined at home.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Home__carbon_monoxide
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type carbon_monoxide  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = carbon_monoxide,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type carbon_monoxide__ref  = { mutable carbon_monoxide__content : carbon_monoxide }
  
  function   carbon_monoxide__ref_carbon_monoxide__content__projection
    (a : carbon_monoxide__ref) requires {  } ensures  {  } returns
    carbon_monoxide = a.carbon_monoxide__content
  
  meta model_projection function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  meta inline:no function carbon_monoxide__ref_carbon_monoxide__content__projection
  
  function   carbon_monoxide__havoc (x : carbon_monoxide__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "carbon_monoxide" defined at home.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Home__carbon_monoxide___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Home__carbon_monoxide
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_217) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_213) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_214) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_216) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_213) = True) \/
          (Home__carbon_monoxide.first <= Home__carbon_monoxide.last))
       then
       (Home__carbon_monoxide.dynamic_property Home__carbon_monoxide.first
          Home__carbon_monoxide.last ([mlw:proxy_symbol]
          [introduced] temp___expr_217))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_218) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_219) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "house_temp_result" defined at home.adb:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Home__checklevelofcarbonmonoxide__house_temp_result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "windows_result" defined at home.adb:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Home__checklevelofcarbonmonoxide__windows_result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "fridge_result" defined at home.adb:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Home__checklevelofcarbonmonoxide__fridge_result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "oven_result" defined at home.adb:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Home__checklevelofcarbonmonoxide__oven_result___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "cm" defined at home.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Home__checklevelofcarbonmonoxide__cm___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "temperature" defined at heating_system.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Heating_system__temperature___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Heating_system__temperature
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_165) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_161) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_164) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_161) = True) \/
          (Heating_system__temperature.first
             <= Heating_system__temperature.last))
       then
       (Heating_system__temperature.dynamic_property
          Heating_system__temperature.first Heating_system__temperature.last
          ([mlw:proxy_symbol] [introduced] temp___expr_165))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_167) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "windows" defined at heating_system.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Heating_system__windows___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Heating_system__windows
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Heating_system__windows.first <= Heating_system__windows.last))
       then
       (Heating_system__windows.dynamic_property
          Heating_system__windows.first Heating_system__windows.last
          ([mlw:proxy_symbol] [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "fridge" defined at kitchen_appliances.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Kitchen_appliances__fridge___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Kitchen_appliances__fridge
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_179) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_178) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_175) = True) \/
          (Kitchen_appliances__fridge.first
             <= Kitchen_appliances__fridge.last))
       then
       (Kitchen_appliances__fridge.dynamic_property
          Kitchen_appliances__fridge.first Kitchen_appliances__fridge.last
          ([mlw:proxy_symbol] [introduced] temp___expr_179))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_181) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "oven" defined at kitchen_appliances.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Kitchen_appliances__oven___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Kitchen_appliances__oven
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_186) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_182) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_183) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_184) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_185) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_182) = True) \/
          (Kitchen_appliances__oven.first <= Kitchen_appliances__oven.last))
       then
       (Kitchen_appliances__oven.dynamic_property
          Kitchen_appliances__oven.first Kitchen_appliances__oven.last
          ([mlw:proxy_symbol] [introduced] temp___expr_186))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_187) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_188) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for checking contracts and absence of run-time errors in subprogram "checklevelofcarbonmonoxide" defined at home.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Home__checklevelofcarbonmonoxide__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Home__homesettingforenergy
  use        Home__homesettingforenergy___axiom
  use        Home__house_temperature___axiom
  use        Home__control_windows___axiom
  use        Kitchen_appliances__not_open
  use        Kitchen_appliances__not_open___axiom
  use        Home__isfridgeopenorclosed___axiom
  use        Home__isovenopenorclosed___axiom
  use        Home__checklevelofcarbonmonoxide__cm
  use        Home__checklevelofcarbonmonoxide__house_temp_result
  use        Home__checklevelofcarbonmonoxide__windows_result
  use        Home__checklevelofcarbonmonoxide__fridge_result
  use        Home__checklevelofcarbonmonoxide__oven_result
  use        Heating_system__temperature
  use        Heating_system__temperature__rep
  use        Heating_system__windows
  use        Heating_system__windows__rep
  use        Kitchen_appliances__fridge
  use        Kitchen_appliances__fridge__rep
  use        Kitchen_appliances__oven
  use        Kitchen_appliances__oven__rep
  use        Home__carbon_monoxide___axiom
  use        Home__checklevelofcarbonmonoxide__house_temp_result___axiom
  use        Home__checklevelofcarbonmonoxide__windows_result___axiom
  use        Home__checklevelofcarbonmonoxide__fridge_result___axiom
  use        Home__checklevelofcarbonmonoxide__oven_result___axiom
  use        Home__homesettingforenergy___axiom
  use        Home__carbon_monoxide___axiom
  use        Home__house_temperature___axiom
  use        Home__control_windows___axiom
  use        Home__isfridgeopenorclosed___axiom
  use        Home__isovenopenorclosed___axiom
  use        Home__checklevelofcarbonmonoxide__cm___axiom
  use        Heating_system__temperature___axiom
  use        Heating_system__windows___axiom
  use        Kitchen_appliances__fridge___axiom
  use        Kitchen_appliances__oven___axiom
  use        Kitchen_appliances__not_open___axiom
  
  function [GP_Subp:home.ads:30] [sloc:home.ads:30] def (__void_param : unit)
    requires { True } ensures 
    { ([sloc:home.ads:32] ([GP_Reason:VC_POSTCONDITION]
                          [GP_Shape:pragargs__cmp]
                          [comment:     Post => cm = Safe;              ^ home.ads:32:14:VC_POSTCONDITION]
                          [model_vc_post] [GP_Id:8]
                          [GP_Sloc:home.ads:32:14] ([GP_Pretty_Ada:1579]
                                                   [GP_Sloc:home.ads:32:14] (
                                                   !Home__checklevelofcarbonmonoxide__cm.cm
                                                     = 0)))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram home.ads:30 *);
        assume
        { (Home__carbon_monoxide___axiom.dynamic_invariant
             !Home__checklevelofcarbonmonoxide__cm.cm True False True True) };
        (* Assume moved pointers in outputs of the subprogram home.ads:30 *);
        (* Check for RTE in the Pre of the subprogram home.ads:30 *);
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.orb
                          (!Home__checklevelofcarbonmonoxide__cm.cm = 1)
                          (!Home__checklevelofcarbonmonoxide__cm.cm = 0))
                       in ())  end;
        (* Assume Pre of the subprogram home.ads:30 *);
        assume
        { ([GP_Pretty_Ada:1569] ((!Home__checklevelofcarbonmonoxide__cm.cm
                                    = 1) \/
                                   (!Home__checklevelofcarbonmonoxide__cm.cm
                                      = 0))) };
        (try
        ();
          ([sloc:home.adb:50] (let home__checklevelofcarbonmonoxide__house_temp_result__assume
          = ( --pp_record_aggregate NOT IMPLEMENTED) in (
          Home__checklevelofcarbonmonoxide__house_temp_result.house_temp_result__split_fields
          :=
          home__checklevelofcarbonmonoxide__house_temp_result__assume.Home__homesettingforenergy.__split_fields));
          assume
          { (Home__homesettingforenergy___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:home.adb:54] (let home__checklevelofcarbonmonoxide__windows_result__assume
          = ( --pp_record_aggregate NOT IMPLEMENTED) in (
          Home__checklevelofcarbonmonoxide__windows_result.windows_result__split_fields
          :=
          home__checklevelofcarbonmonoxide__windows_result__assume.Home__homesettingforenergy.__split_fields));
          assume
          { (Home__homesettingforenergy___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:home.adb:58] abstract ensures
          { True } begin  (let _ =
                         (let ([mlw:proxy_symbol] [introduced] temp___232) =
                           ( any  pre {} post {True} return
                             Kitchen_appliances__not_open.not_open)
                         in ())
          in ())  end;
          assume
          { (Kitchen_appliances__not_open___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Kitchen_appliances__not_open___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
        ([sloc:home.adb:59] abstract ensures
        { True } begin  (let _ =
                       (let ([mlw:proxy_symbol] [introduced] temp___234) =
                         ( any  pre {} post {True} return
                           Kitchen_appliances__not_open.not_open)
                       in ())
        in ())  end;
        assume
        { (Kitchen_appliances__not_open___axiom.default_initial_assumption
             --pp_record_aggregate NOT IMPLEMENTED False) };
        assume
        { (Kitchen_appliances__not_open___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED False False True True) });
    ();
    ([GP_Sloc:home.adb:62:25] ([sloc:home.adb:62] ()));
    ([GP_Sloc:home.adb:62:7] ([sloc:home.adb:62] ()));
    ([GP_Sloc:home.adb:62:7] ([sloc:home.adb:62] (let ([mlw:proxy_symbol]
                             [introduced] temp___compl_236) =
                             ( --pp_record_aggregate NOT IMPLEMENTED) in
                             ( any --pp_effects NOT IMPLEMENTED pre {} post
                             {} return unit);
    ([sloc:home.adb:62] ([GP_Shape:call_house_temperature]
                        [GP_Reason:VC_PRECONDITION] [vc:annotation]
                        [comment:      House_Temperature(House_Temp_Result);       ^ home.adb:62:7:VC_PRECONDITION]
                        [GP_Sloc:home.adb:62:7]
                        [GP_Id:6] (Home__house_temperature___axiom.house_temperature
                                     Home__checklevelofcarbonmonoxide__house_temp_result.house_temp_result__split_fields)));
    ())));
  ([GP_Sloc:home.adb:63:23] ([sloc:home.adb:63] ()));
  ([GP_Sloc:home.adb:63:7] ([sloc:home.adb:63] ()));
  ([GP_Sloc:home.adb:63:7] ([sloc:home.adb:63] (let ([mlw:proxy_symbol]
                           [introduced] temp___compl_237) =
                           ( --pp_record_aggregate NOT IMPLEMENTED) in
                           ( any --pp_effects NOT IMPLEMENTED pre {} post {
                           } return unit);
  ([sloc:home.adb:63] ([GP_Reason:VC_PRECONDITION]
                      [GP_Shape:call_control_windows] [vc:annotation]
                      [comment:      Control_Windows(Windows_Result);       ^ home.adb:63:7:VC_PRECONDITION]
                      [GP_Sloc:home.adb:63:7]
                      [GP_Id:7] (Home__control_windows___axiom.control_windows
                                   Home__checklevelofcarbonmonoxide__windows_result.windows_result__split_fields)));
  ())));
([GP_Sloc:home.adb:64:28] ([sloc:home.adb:64] ()));
([GP_Sloc:home.adb:64:7] ([sloc:home.adb:64] ()));
([GP_Sloc:home.adb:64:7] ([sloc:home.adb:64] (let ([mlw:proxy_symbol]
                         [introduced] temp___compl_238) =
                         ( ( --pp_record_aggregate NOT IMPLEMENTED)) in
                         ( any --pp_effects NOT IMPLEMENTED pre {} post {
                         } return unit);
(Home__isfridgeopenorclosed___axiom.isfridgeopenorclosed
   Home__checklevelofcarbonmonoxide__fridge_result.fridge_result__split_fields);
())));
([GP_Sloc:home.adb:65:26] ([sloc:home.adb:65] ()));
([GP_Sloc:home.adb:65:7] ([sloc:home.adb:65] ()));
([GP_Sloc:home.adb:65:7] ([sloc:home.adb:65] (let ([mlw:proxy_symbol]
                         [introduced] temp___compl_239) =
                         ( ( --pp_record_aggregate NOT IMPLEMENTED)) in
                         ( any --pp_effects NOT IMPLEMENTED pre {} post {
                         } return unit);
(Home__isovenopenorclosed___axiom.isovenopenorclosed
   Home__checklevelofcarbonmonoxide__oven_result.oven_result__split_fields);
())));
([GP_Sloc:home.adb:70:10] ([sloc:home.adb:70] ()));
([GP_Sloc:home.adb:71:10] ([sloc:home.adb:71] ()));
([GP_Sloc:home.adb:72:10] ([sloc:home.adb:72] ()));
([GP_Sloc:home.adb:73:10] ([sloc:home.adb:73] ()));
([GP_Sloc:home.adb:74:10] ([sloc:home.adb:74] ()));
([GP_Sloc:home.adb:70:7] ([sloc:home.adb:70] (if
                                             ([sloc:home.adb:70] ([branch_id=963]
                                             _gnatprove_standard.Main.spark__branch
                                             :=
                                             (_gnatprove_standard.Boolean.andb
                                                (_gnatprove_standard.Boolean.andb
                                                   (_gnatprove_standard.Boolean.andb
                                                      (_gnatprove_standard.Boolean.andb
                                                         ((Heating_system__temperature__rep.to_rep
                                                             ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                                            >= 17)
                                                         ((Heating_system__temperature__rep.to_rep
                                                             ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting)
                                                            <= 19))
                                                      ((Heating_system__windows__rep.to_rep
                                                          ( --pp_record_aggregate NOT IMPLEMENTED).Home__homesettingforenergy.__split_fields.Home__homesettingforenergy.rec__home__homesettingforenergy__windowsstatus)
                                                         = 1))
                                                   ((Kitchen_appliances__fridge__rep.to_rep
                                                       ( --pp_record_aggregate NOT IMPLEMENTED).Kitchen_appliances__not_open.__split_fields.Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__f)
                                                      = 0))
                                                ((Kitchen_appliances__oven__rep.to_rep
                                                    ( --pp_record_aggregate NOT IMPLEMENTED).Kitchen_appliances__not_open.__split_fields.Kitchen_appliances__not_open.rec__kitchen_appliances__not_open__o)
                                                   = 1))));
                                             ([branch_id=963] _gnatprove_standard.Main.spark__branch).bool__content
                                             then
                                             ();
                                             ([GP_Sloc:home.adb:76:13] 
                                             ([sloc:home.adb:76] (
                                             Home__checklevelofcarbonmonoxide__cm.cm
                                             := ( 0))))  else
                                             ();
                                             ([GP_Sloc:home.adb:79:13] 
                                             ([sloc:home.adb:79] (
                                             Home__checklevelofcarbonmonoxide__cm.cm
                                             := ( 1)))))));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = (!Home__checklevelofcarbonmonoxide__cm.cm = 0) in
               ())  end

end
