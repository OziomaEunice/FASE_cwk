module Kitchen_appliances__fridge
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type fridge
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = fridge,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type fridge__ref = { mutable fridge__content : fridge }
  
  function fridge__ref_fridge__content__projection (a: fridge__ref) : fridge =
    a.fridge__content
  
  meta "model_projection" function fridge__ref_fridge__content__projection
  
  meta "inline:no" function fridge__ref_fridge__content__projection
  
  val fridge__havoc (x: fridge__ref) : unit
    writes { x }
end

module Kitchen_appliances__fridge__rep
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Kitchen_appliances__fridge.fridge,
    predicate in_range = Kitchen_appliances__fridge.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Kitchen_appliances__oven
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type oven
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = oven,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type oven__ref = { mutable oven__content : oven }
  
  function oven__ref_oven__content__projection (a: oven__ref) : oven =
    a.oven__content
  
  meta "model_projection" function oven__ref_oven__content__projection
  
  meta "inline:no" function oven__ref_oven__content__projection
  
  val oven__havoc (x: oven__ref) : unit
    writes { x }
end

module Kitchen_appliances__oven__rep
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Kitchen_appliances__oven.oven,
    predicate in_range = Kitchen_appliances__oven.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Kitchen_appliances__not_open__rep
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  use Kitchen_appliances__fridge__rep as Kitchen_appliances__fridge__rep
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  use Kitchen_appliances__oven__rep as Kitchen_appliances__oven__rep
  
  type __split_fields = {
                       rec__kitchen_appliances__not_open__f :
                         Kitchen_appliances__fridge.fridge;
                       rec__kitchen_appliances__not_open__o :
                         Kitchen_appliances__oven.oven
                       }
  
  function __split_fields_rec__kitchen_appliances__not_open__f__projection (a: __split_fields) : 
    Kitchen_appliances__fridge.fridge =
    a.rec__kitchen_appliances__not_open__f
  
  meta "model_projection" function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  meta "inline:no" function __split_fields_rec__kitchen_appliances__not_open__f__projection
  
  function __split_fields_rec__kitchen_appliances__not_open__o__projection (a: __split_fields) : 
    Kitchen_appliances__oven.oven =
    a.rec__kitchen_appliances__not_open__o
  
  meta "model_projection" function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  meta "inline:no" function __split_fields_rec__kitchen_appliances__not_open__o__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate kitchen_appliances__not_open__f__pred (a: __rep) = true
  
  val kitchen_appliances__not_open__f__pred (a: __rep) : bool
    ensures { result <-> (kitchen_appliances__not_open__f__pred (a : __rep)) }
  
  val rec__kitchen_appliances__not_open__f_ (a: __rep) : Kitchen_appliances__fridge.fridge
    requires { kitchen_appliances__not_open__f__pred a }
    ensures { (result
                 = ((__split_fields a).rec__kitchen_appliances__not_open__f)) }
  
  predicate kitchen_appliances__not_open__o__pred (a: __rep) = true
  
  val kitchen_appliances__not_open__o__pred (a: __rep) : bool
    ensures { result <-> (kitchen_appliances__not_open__o__pred (a : __rep)) }
  
  val rec__kitchen_appliances__not_open__o_ (a: __rep) : Kitchen_appliances__oven.oven
    requires { kitchen_appliances__not_open__o__pred a }
    ensures { (result
                 = ((__split_fields a).rec__kitchen_appliances__not_open__o)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Kitchen_appliances__fridge__rep.to_rep
            ((__split_fields a).rec__kitchen_appliances__not_open__f))
           = (Kitchen_appliances__fridge__rep.to_rep
                ((__split_fields b).rec__kitchen_appliances__not_open__f))) /\
          ((Kitchen_appliances__oven__rep.to_rep
              ((__split_fields a).rec__kitchen_appliances__not_open__o))
             = (Kitchen_appliances__oven__rep.to_rep
                  ((__split_fields b).rec__kitchen_appliances__not_open__o)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Kitchen_appliances__not_open
  use export Kitchen_appliances__not_open__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type not_open = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function kitchen_appliances__not_open__f__first__bit : int
  
  val function kitchen_appliances__not_open__f__last__bit : int
  
  val function kitchen_appliances__not_open__f__position : int
  
  axiom kitchen_appliances__not_open__f__first__bit_axiom:
    (kitchen_appliances__not_open__f__first__bit >= (0 : int))
  
  axiom kitchen_appliances__not_open__f__last__bit_axiom:
    (kitchen_appliances__not_open__f__last__bit
       > kitchen_appliances__not_open__f__first__bit)
  
  axiom kitchen_appliances__not_open__f__position_axiom:
    (kitchen_appliances__not_open__f__position >= (0 : int))
  
  val function kitchen_appliances__not_open__o__first__bit : int
  
  val function kitchen_appliances__not_open__o__last__bit : int
  
  val function kitchen_appliances__not_open__o__position : int
  
  axiom kitchen_appliances__not_open__o__first__bit_axiom:
    (kitchen_appliances__not_open__o__first__bit >= (0 : int))
  
  axiom kitchen_appliances__not_open__o__last__bit_axiom:
    (kitchen_appliances__not_open__o__last__bit
       > kitchen_appliances__not_open__o__first__bit)
  
  axiom kitchen_appliances__not_open__o__position_axiom:
    (kitchen_appliances__not_open__o__position >= (0 : int))
  
  val function user_eq (a: not_open) (b: not_open) : bool
  
  val function dummy : not_open
  
  type not_open__ref = { mutable not_open__content : not_open }
  
  function not_open__ref_not_open__content__projection (a: not_open__ref) : not_open =
    a.not_open__content
  
  meta "model_projection" function not_open__ref_not_open__content__projection
  
  meta "inline:no" function not_open__ref_not_open__content__projection
  
  val not_open__havoc (x: not_open__ref) : unit
    writes { x }
end

module Heating_system__temperature
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type temperature = <range 0 40>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (40 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = temperature,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type temperature__ref = { mutable temperature__content : temperature }
  
  function temperature__ref_temperature__content__projection (a: temperature__ref) : temperature =
    a.temperature__content
  
  meta "model_projection" function temperature__ref_temperature__content__projection
  
  meta "inline:no" function temperature__ref_temperature__content__projection
  
  val temperature__havoc (x: temperature__ref) : unit
    writes { x }
end

module Heating_system__temperature__rep
  use Heating_system__temperature as Heating_system__temperature
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Heating_system__temperature.temperature) : int =
    Heating_system__temperature.temperature'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Heating_system__temperature.temperature,
    predicate in_range = Heating_system__temperature.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Heating_system__windows
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type windows
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = windows,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type windows__ref = { mutable windows__content : windows }
  
  function windows__ref_windows__content__projection (a: windows__ref) : windows =
    a.windows__content
  
  meta "model_projection" function windows__ref_windows__content__projection
  
  meta "inline:no" function windows__ref_windows__content__projection
  
  val windows__havoc (x: windows__ref) : unit
    writes { x }
end

module Heating_system__windows__rep
  use Heating_system__windows as Heating_system__windows
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Heating_system__windows.windows,
    predicate in_range = Heating_system__windows.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Home__homesettingforenergy__rep
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  use Heating_system__temperature as Heating_system__temperature
  use Heating_system__temperature__rep as Heating_system__temperature__rep
  use Heating_system__windows as Heating_system__windows
  use Heating_system__windows__rep as Heating_system__windows__rep
  
  type __split_fields = {
                       rec__home__homesettingforenergy__temperaturesetting :
                         Heating_system__temperature.temperature;
                       rec__home__homesettingforenergy__windowsstatus :
                         Heating_system__windows.windows;
                       rec__home__homesettingforenergy__fridgestatus :
                         Kitchen_appliances__not_open.not_open;
                       rec__home__homesettingforenergy__ovenstatus :
                         Kitchen_appliances__not_open.not_open
                       }
  
  function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection (a: __split_fields) : 
    Heating_system__temperature.temperature =
    a.rec__home__homesettingforenergy__temperaturesetting
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__temperaturesetting__projection
  
  function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection (a: __split_fields) : 
    Heating_system__windows.windows =
    a.rec__home__homesettingforenergy__windowsstatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__windowsstatus__projection
  
  function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection (a: __split_fields) : 
    Kitchen_appliances__not_open.not_open =
    a.rec__home__homesettingforenergy__fridgestatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__fridgestatus__projection
  
  function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection (a: __split_fields) : 
    Kitchen_appliances__not_open.not_open =
    a.rec__home__homesettingforenergy__ovenstatus
  
  meta "model_projection" function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  meta "inline:no" function __split_fields_rec__home__homesettingforenergy__ovenstatus__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate home__homesettingforenergy__temperaturesetting__pred (a: __rep) =
    true
  
  val home__homesettingforenergy__temperaturesetting__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (home__homesettingforenergy__temperaturesetting__pred
                   (a : __rep)) }
  
  val rec__home__homesettingforenergy__temperaturesetting_ (a: __rep) : 
    Heating_system__temperature.temperature
    requires { home__homesettingforenergy__temperaturesetting__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__temperaturesetting)) }
  
  predicate home__homesettingforenergy__windowsstatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__windowsstatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__windowsstatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__windowsstatus_ (a: __rep) : Heating_system__windows.windows
    requires { home__homesettingforenergy__windowsstatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__windowsstatus)) }
  
  predicate home__homesettingforenergy__fridgestatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__fridgestatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__fridgestatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__fridgestatus_ (a: __rep) : Kitchen_appliances__not_open.not_open
    requires { home__homesettingforenergy__fridgestatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__fridgestatus)) }
  
  predicate home__homesettingforenergy__ovenstatus__pred (a: __rep) = true
  
  val home__homesettingforenergy__ovenstatus__pred (a: __rep) : bool
    ensures { result
                <->
                (home__homesettingforenergy__ovenstatus__pred (a : __rep)) }
  
  val rec__home__homesettingforenergy__ovenstatus_ (a: __rep) : Kitchen_appliances__not_open.not_open
    requires { home__homesettingforenergy__ovenstatus__pred a }
    ensures { (result
                 = ((__split_fields a).rec__home__homesettingforenergy__ovenstatus)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Heating_system__temperature__rep.to_rep
             ((__split_fields a).rec__home__homesettingforenergy__temperaturesetting))
            = (Heating_system__temperature__rep.to_rep
                 ((__split_fields b).rec__home__homesettingforenergy__temperaturesetting))) /\
           ((Heating_system__windows__rep.to_rep
               ((__split_fields a).rec__home__homesettingforenergy__windowsstatus))
              = (Heating_system__windows__rep.to_rep
                   ((__split_fields b).rec__home__homesettingforenergy__windowsstatus)))) /\
          (((Kitchen_appliances__not_open.bool_eq
               ((__split_fields a).rec__home__homesettingforenergy__fridgestatus))
              ((__split_fields b).rec__home__homesettingforenergy__fridgestatus)) /\
             ((Kitchen_appliances__not_open.bool_eq
                 ((__split_fields a).rec__home__homesettingforenergy__ovenstatus))
                ((__split_fields b).rec__home__homesettingforenergy__ovenstatus)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Home__homesettingforenergy
  use export Home__homesettingforenergy__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type homesettingforenergy = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function home__homesettingforenergy__temperaturesetting__first__bit : 
    int
  
  val function home__homesettingforenergy__temperaturesetting__last__bit : 
    int
  
  val function home__homesettingforenergy__temperaturesetting__position : 
    int
  
  axiom home__homesettingforenergy__temperaturesetting__first__bit_axiom:
    (home__homesettingforenergy__temperaturesetting__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__temperaturesetting__last__bit_axiom:
    (home__homesettingforenergy__temperaturesetting__last__bit
       > home__homesettingforenergy__temperaturesetting__first__bit)
  
  axiom home__homesettingforenergy__temperaturesetting__position_axiom:
    (home__homesettingforenergy__temperaturesetting__position >= (0 : int))
  
  val function home__homesettingforenergy__windowsstatus__first__bit : 
    int
  
  val function home__homesettingforenergy__windowsstatus__last__bit : 
    int
  
  val function home__homesettingforenergy__windowsstatus__position : 
    int
  
  axiom home__homesettingforenergy__windowsstatus__first__bit_axiom:
    (home__homesettingforenergy__windowsstatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__windowsstatus__last__bit_axiom:
    (home__homesettingforenergy__windowsstatus__last__bit
       > home__homesettingforenergy__windowsstatus__first__bit)
  
  axiom home__homesettingforenergy__windowsstatus__position_axiom:
    (home__homesettingforenergy__windowsstatus__position >= (0 : int))
  
  val function home__homesettingforenergy__fridgestatus__first__bit : 
    int
  
  val function home__homesettingforenergy__fridgestatus__last__bit : 
    int
  
  val function home__homesettingforenergy__fridgestatus__position : int
  
  axiom home__homesettingforenergy__fridgestatus__first__bit_axiom:
    (home__homesettingforenergy__fridgestatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__fridgestatus__last__bit_axiom:
    (home__homesettingforenergy__fridgestatus__last__bit
       > home__homesettingforenergy__fridgestatus__first__bit)
  
  axiom home__homesettingforenergy__fridgestatus__position_axiom:
    (home__homesettingforenergy__fridgestatus__position >= (0 : int))
  
  val function home__homesettingforenergy__ovenstatus__first__bit : int
  
  val function home__homesettingforenergy__ovenstatus__last__bit : int
  
  val function home__homesettingforenergy__ovenstatus__position : int
  
  axiom home__homesettingforenergy__ovenstatus__first__bit_axiom:
    (home__homesettingforenergy__ovenstatus__first__bit >= (0 : int))
  
  axiom home__homesettingforenergy__ovenstatus__last__bit_axiom:
    (home__homesettingforenergy__ovenstatus__last__bit
       > home__homesettingforenergy__ovenstatus__first__bit)
  
  axiom home__homesettingforenergy__ovenstatus__position_axiom:
    (home__homesettingforenergy__ovenstatus__position >= (0 : int))
  
  val function user_eq (a: homesettingforenergy) (b: homesettingforenergy) : 
    bool
  
  val function dummy : homesettingforenergy
  
  type homesettingforenergy__ref = {
                                  mutable homesettingforenergy__content :
                                    homesettingforenergy
                                  }
  
  function homesettingforenergy__ref_homesettingforenergy__content__projection (a: homesettingforenergy__ref) : homesettingforenergy =
    a.homesettingforenergy__content
  
  meta "model_projection" function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  meta "inline:no" function homesettingforenergy__ref_homesettingforenergy__content__projection
  
  val homesettingforenergy__havoc (x: homesettingforenergy__ref) : unit
    writes { x }
end

module Home__house_temperature__ht
  use _gnatprove_standard.Main
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  
  val ht__split_fields : Home__homesettingforenergy.__split_fields__ref
end

module Home__homesettingforenergy___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Home__homesettingforenergy as Home__homesettingforenergy
  
  predicate dynamic_invariant (temp___expr_203: Home__homesettingforenergy.homesettingforenergy) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) =
    true
  
  val dynamic_invariant (temp___expr_203: Home__homesettingforenergy.homesettingforenergy) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_203 :
                          Home__homesettingforenergy.homesettingforenergy))
                      (temp___is_init_199 : bool))
                     (temp___skip_constant_200 : bool))
                    (temp___do_toplevel_201 : bool))
                   (temp___do_typ_inv_202 : bool)) }
  
  predicate default_initial_assumption (temp___expr_204: Home__homesettingforenergy.homesettingforenergy) (temp___skip_top_level_205: bool) =
    true
  
  val default_initial_assumption (temp___expr_204: Home__homesettingforenergy.homesettingforenergy) (temp___skip_top_level_205: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_204 :
                       Home__homesettingforenergy.homesettingforenergy))
                   (temp___skip_top_level_205 : bool)) }
end

module Heating_system__temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Heating_system__temperature as Heating_system__temperature
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/
          (Heating_system__temperature.first
             <= Heating_system__temperature.last)) then
      (((Heating_system__temperature.dynamic_property
           Heating_system__temperature.first)
          Heating_system__temperature.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Heating_system__control_temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Heating_system__temperature___axiom as Heating_system__temperature___axiom
  
  val control_temperature (temp: int__ref) : unit
    requires { [@GP_Pretty_Ada:1307] ((temp.int__content) = (15 : int)) }
    writes { temp }
    ensures { ((([@GP_Pretty_Ada:1184] ((temp.int__content) >= (17 : int))) /\
                  ([@GP_Pretty_Ada:1188] ((temp.int__content) <= (19 : int)))) /\
                 (((((Heating_system__temperature___axiom.dynamic_invariant
                        (temp.int__content))
                       True)
                      True)
                     True)
                    True)) }
end

module Home__house_temperature__ht___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Heating_system__windows___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Heating_system__windows as Heating_system__windows
  
  predicate dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) =
    if ((temp___is_init_169 = True) \/
          (Heating_system__windows.first <= Heating_system__windows.last)) then
      (((Heating_system__windows.dynamic_property
           Heating_system__windows.first)
          Heating_system__windows.last)
         temp___expr_173)
    else true
  
  val dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_173 : int))
                      (temp___is_init_169 : bool))
                     (temp___skip_constant_170 : bool))
                    (temp___do_toplevel_171 : bool))
                   (temp___do_typ_inv_172 : bool)) }
  
  predicate default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) =
    true
  
  val default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_174 : int))
                   (temp___skip_top_level_175 : bool)) }
end

module Kitchen_appliances__fridge___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__fridge as Kitchen_appliances__fridge
  
  predicate dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    if ((temp___is_init_176 = True) \/
          (Kitchen_appliances__fridge.first
             <= Kitchen_appliances__fridge.last)) then
      (((Kitchen_appliances__fridge.dynamic_property
           Kitchen_appliances__fridge.first)
          Kitchen_appliances__fridge.last)
         temp___expr_180)
    else true
  
  val dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_180 : int))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) =
    true
  
  val default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_181 : int))
                   (temp___skip_top_level_182 : bool)) }
end

module Kitchen_appliances__oven___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Kitchen_appliances__oven as Kitchen_appliances__oven
  
  predicate dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) =
    if ((temp___is_init_183 = True) \/
          (Kitchen_appliances__oven.first <= Kitchen_appliances__oven.last)) then
      (((Kitchen_appliances__oven.dynamic_property
           Kitchen_appliances__oven.first)
          Kitchen_appliances__oven.last)
         temp___expr_187)
    else true
  
  val dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_187 : int))
                      (temp___is_init_183 : bool))
                     (temp___skip_constant_184 : bool))
                    (temp___do_toplevel_185 : bool))
                   (temp___do_typ_inv_186 : bool)) }
  
  predicate default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) =
    true
  
  val default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_188 : int))
                   (temp___skip_top_level_189 : bool)) }
end

module Kitchen_appliances__not_open___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Kitchen_appliances__not_open as Kitchen_appliances__not_open
  
  predicate dynamic_invariant (temp___expr_194: Kitchen_appliances__not_open.not_open) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) =
    true
  
  val dynamic_invariant (temp___expr_194: Kitchen_appliances__not_open.not_open) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_194 :
                          Kitchen_appliances__not_open.not_open))
                      (temp___is_init_190 : bool))
                     (temp___skip_constant_191 : bool))
                    (temp___do_toplevel_192 : bool))
                   (temp___do_typ_inv_193 : bool)) }
  
  predicate default_initial_assumption (temp___expr_195: Kitchen_appliances__not_open.not_open) (temp___skip_top_level_196: bool) =
    true
  
  val default_initial_assumption (temp___expr_195: Kitchen_appliances__not_open.not_open) (temp___skip_top_level_196: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_195 : Kitchen_appliances__not_open.not_open))
                   (temp___skip_top_level_196 : bool)) }
end

module Home__house_temperature__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Home__house_temperature__ht as Home__house_temperature__ht
  use Home__homesettingforenergy as Home__homesettingforenergy
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Heating_system__control_temperature___axiom as Heating_system__control_temperature___axiom
  use Heating_system__temperature as Heating_system__temperature
  use Heating_system__temperature__rep as Heating_system__temperature__rep
  use Home__homesettingforenergy___axiom as Home__homesettingforenergy___axiom
  use Home__house_temperature__ht___axiom as Home__house_temperature__ht___axiom
  use Heating_system__temperature___axiom as Heating_system__temperature___axiom
  use Heating_system__windows___axiom as Heating_system__windows___axiom
  use Heating_system__control_temperature___axiom as Heating_system__control_temperature___axiom
  use Kitchen_appliances__fridge___axiom as Kitchen_appliances__fridge___axiom
  use Kitchen_appliances__oven___axiom as Kitchen_appliances__oven___axiom
  use Kitchen_appliances__not_open___axiom as Kitchen_appliances__not_open___axiom
  
  let def (__void_param : unit)
    requires { [#"home.ads" 16 0 0] true }
    ensures { [#"home.ads" 16 0 0]
              [#"home.ads" 18 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:home.ads:18:14]
              [@comment:     Post => (ht.TemperatureSetting >= 17 and ht.TemperatureSetting <= 19);               ^ home.ads:18:14:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:1]
              [@GP_Shape:pragargs__and]
              (([@GP_Pretty_Ada:1045]
                [@GP_Sloc:home.ads:18:15]
                ((Heating_system__temperature__rep.to_rep
                    ((Home__homesettingforenergy.__split_fields
                         { Home__homesettingforenergy.__split_fields =
                             (Home__homesettingforenergy.__split_fields__content
                                 Home__house_temperature__ht.ht__split_fields) }).
                       Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                   >= (17 : int))) /\
                 ([@GP_Sloc:home.ads:18:47]
                  [@GP_Pretty_Ada:1051]
                  ((Heating_system__temperature__rep.to_rep
                      ((Home__homesettingforenergy.__split_fields
                           { Home__homesettingforenergy.__split_fields =
                               (Home__homesettingforenergy.__split_fields__content
                                   Home__house_temperature__ht.ht__split_fields) }).
                         Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                     <= (19 : int)))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram home.ads:16]
      ());
     assume {
       ((((Home__homesettingforenergy___axiom.dynamic_invariant
             { Home__homesettingforenergy.__split_fields =
                 (Home__homesettingforenergy.__split_fields__content
                     Home__house_temperature__ht.ht__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram home.ads:16]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram home.ads:16]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Heating_system__temperature__rep.to_rep
                ((Home__homesettingforenergy.__split_fields
                     { Home__homesettingforenergy.__split_fields =
                         (Home__homesettingforenergy.__split_fields__content
                             Home__house_temperature__ht.ht__split_fields) }).
                   Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
               < (17 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram home.ads:16] ());
     assume {
       [@GP_Pretty_Ada:1430]
       ((Heating_system__temperature__rep.to_rep
           ((Home__homesettingforenergy.__split_fields
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__house_temperature__ht.ht__split_fields) }).
              Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
          < (17 : int)) };
     (try
        ([@GP_Sloc:home.adb:8:29]
         [#"home.adb" 8 0 0]
         (let temp___227 =
            let temp___226 =
              { Home__homesettingforenergy.__split_fields =
                  (Home__homesettingforenergy.__split_fields__content
                      Home__house_temperature__ht.ht__split_fields) } in
            ([#"home.adb" 8 0 0]
             (begin
                ensures { true }
                let _ =
                  let _ =
                    (Home__homesettingforenergy.__split_fields temp___226).
                      Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting in
                  () in
                ()
              end));
            ({ temp___226 with
               Home__homesettingforenergy.__split_fields =
                 ({ (Home__homesettingforenergy.__split_fields temp___226) with
                    Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting =
                      (15 : Heating_system__temperature.temperature) }) }) in
          [#"home.adb" 8 0 0]
          (Home__house_temperature__ht.ht__split_fields.Home__homesettingforenergy.__split_fields__content <-
             (Home__homesettingforenergy.__split_fields temp___227))));
        ([@GP_Sloc:home.adb:10:7] [#"home.adb" 10 0 0] ());
        ([@GP_Sloc:home.adb:10:7]
         [#"home.adb" 10 0 0]
         (let temp___compl_228 =
            Heating_system__temperature__rep.to_rep
              ((Home__homesettingforenergy.__split_fields
                   { Home__homesettingforenergy.__split_fields =
                       (Home__homesettingforenergy.__split_fields__content
                           Home__house_temperature__ht.ht__split_fields) }).
                 Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting) in
          [#"home.adb" 10 0 0]
          (let temp = { int__content = temp___compl_228 } in
           ([#"home.adb" 10 0 0] (val _f : unit in
                                  _f));
           ([#"home.adb" 10 0 0]
            [@GP_Reason:VC_PRECONDITION]
            [@vc:annotation]
            [@GP_Sloc:home.adb:10:7]
            [@GP_Shape:call_control_temperature]
            [@comment:      Control_Temperature(ht.TemperatureSetting);       ^ home.adb:10:7:VC_PRECONDITION]
            [@GP_Id:0]
            (Heating_system__control_temperature___axiom.control_temperature
               temp));
           (let temp___230 =
              let temp___229 =
                { Home__homesettingforenergy.__split_fields =
                    (Home__homesettingforenergy.__split_fields__content
                        Home__house_temperature__ht.ht__split_fields) } in
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (Home__homesettingforenergy.__split_fields temp___229).
                       Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting in
                   () in
                 ()
               end);
              ({ temp___229 with
                 Home__homesettingforenergy.__split_fields =
                   ({ (Home__homesettingforenergy.__split_fields temp___229) with
                      Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting =
                        (Heating_system__temperature__rep.of_rep
                           (temp.int__content)) }) }) in
            Home__house_temperature__ht.ht__split_fields.Home__homesettingforenergy.__split_fields__content <-
              (Home__homesettingforenergy.__split_fields temp___230)))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Heating_system__temperature__rep.to_rep
                   ((Home__homesettingforenergy.__split_fields
                        { Home__homesettingforenergy.__split_fields =
                            (Home__homesettingforenergy.__split_fields__content
                                Home__house_temperature__ht.ht__split_fields) }).
                      Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                  >= (17 : int)))
              ((Heating_system__temperature__rep.to_rep
                  ((Home__homesettingforenergy.__split_fields
                       { Home__homesettingforenergy.__split_fields =
                           (Home__homesettingforenergy.__split_fields__content
                               Home__house_temperature__ht.ht__split_fields) }).
                     Home__homesettingforenergy.rec__home__homesettingforenergy__temperaturesetting))
                 <= (19 : int)) in
          () in
        ()
      end))
end
